#!/usr/bin/env python3

# Needed packages
    # > sudo apt install sox libsox-fmt-mp3 libsox-fmt-all mp3splt

# Get newest youtube-dl version
    #  cd ~/local_bin
    #  wget https://yt-dl.org/downloads/latest/youtube-dl
    #  chmod +x youtube-dl
    #  # check youtube-dl version
    #  youtube-dl --version

# Using youtube-dl to download playlist items:
    # > youtube-dl --playlist-start 1 --playlist-end 50 --extract-audio --audio-format mp3 --output "%(title)s.%(ext)s" https://www.youtube.com/playlist?list=PLqqxFBxt_EUsLoX4F37iByy0ys4BZT8zi

# Usage: ./nk_music_download 5 7
# Usage: ./nk_music_download 5 7 -d
# Usage: ./nk_music_download 3
# Usage: ./nk_music_download 3 -d
# Limitations: Only 100 songs can be downloaded

# Reference: https://gist.github.com/fffaraz/f3dcf48ae93b6c04adb9d74b1de711e5

import sys
import os
import time
from bs4 import BeautifulSoup
import requests
import glob
import subprocess

def nk_wait_process_exit(window):
    ret = 0
    # grep_string = "[y]outube-dl"
    grep_string = "[" + window[0] + "]" + window[1:]
    # print(grep_string)
    ## https://unix.stackexchange.com/a/74186/156466
    ## https://www.ibm.com/developerworks/library/l-keyc3/#code10

    while ret == 0:
        ret = os.system('ps -ef | grep -i {0} -q'.format(grep_string))
        # https://stackoverflow.com/a/22101965/2450748
        #  print("loading " + window)
        time.sleep(1)

#  nk_wait_process_exit("youtube-dl")

# download songs from playlist
def downloadPlaylistLinks(url, download, songs_range, links):
    i = 0
    sourceCode = requests.get(url).text
    soup = BeautifulSoup(sourceCode, 'html.parser')
    domain = 'https://www.youtube.com'
    for link in soup.find_all("a", {"dir": "ltr"}):
        href = link.get('href')
        if href.startswith('/watch?'):
            #  print(link.string.strip())
            #  print(domain + href + '\n')
            i = i + 1
            #  print(songs_range)
            if i >= int(sys.argv[1]):
                # print song name
                if i < 10:
                    # add extra space for one digit song numbers for alignment
                    print(str(i) + '.  ' + link.string.strip())
                else:
                    print(str(i) + '. ' + link.string.strip())

                # print youtube link
                if download or links:
                    print(domain + href)

                # download song from playlist
                if download:
                    #  youtube-dl --extract-audio --audio-format mp3 --output "%(title)s.%(ext)s" https://www.youtube.com/watch?v=IlVJNrzf_uI&index=97&list=PLqqxFBxt_EUsLoX4F37iByy0ys4BZT8zi
                    os.system('youtube-dl --extract-audio --audio-format mp3 --output "%(title)s.%(ext)s" {0}'.format(domain + href))
                    nk_wait_process_exit("youtube-dl")
                    print()

                #  print("NK num_args:" + str(len(sys.argv)))
                if songs_range:
                    if i >= int(sys.argv[2]):
                        break
                else:
                    break

# get songs names
def get_songs():
    songs = []
    songs = sorted(glob.glob("*.mp3"))
    return songs

# print songs duration
def print_duration():
    songs = get_songs()

    for song_name in songs:
        #  minutes_duration = subprocess.check_output('mp3info -p "%m:%02s" "{0}"'.format(song_name), shell=True);
        seconds_duration = subprocess.check_output('soxi -D "{0}"'.format(song_name), shell=True);
        seconds_duration = float(str(seconds_duration.decode("utf-8")).strip())
        minutes_part = int(seconds_duration//60)
        seconds_part = int(seconds_duration - minutes_part*60)
        #  print( str(song_name) + ' - ' + str(minutes_duration.decode("utf-8")) )
        print( str(song_name) + ' - ' + str(minutes_part).zfill(2) + ':' + str(seconds_part).zfill(2) )

# split mixes
def split_mixes():
    # get songs
    songs = get_songs()
    songs_duration = []

    # extract mp3 duration
    for song_name in songs:
        seconds_duration = subprocess.check_output('soxi -D "{0}"'.format(song_name), shell=True);
        seconds_duration = float(str(seconds_duration.decode("utf-8")).strip())
        minutes_part = int(seconds_duration//60)
        #  minutes_duration = subprocess.check_output('mp3info -p "%m" "{0}"'.format(song_name), shell=True);
        songs_duration.append(int(minutes_part))

    #  for i in range(0,len(songs)):
        #  print( str(songs[i]) + ' - ' + str(songs_duration[i]) )

    # split mixes
    for i in range(0,len(songs)):
        if songs_duration[i] >= 12:
            os.system('mp3splt -t 8.0 "{0}"'.format(songs[i]))
            os.system('rm "{0}"'.format(songs[i]))


# print help
def print_help():
    print("""
    > nk_music_download start_index [stop_index] [-d] [-l] [-s] [-p]

    Example usages:
        List (print only) playlist songs from 5 to 7:
            > nk_music_download 5 7

        Download playlist songs from 5 to 7:
            > nk_music_download 5 7 -d

        List (print only) playlist songs from 5 to 7 with youtube links:
            > nk_music_download 5 7 -l

        List (print only) playlist song 3:
            > nk_music_download 3

        Download playlist song 3:
            > nk_music_download 3 -d

        List (print only) playlist song 3 with youtube link:
            > nk_music_download 3 -l

        Split mixes(songs longer than 12 minutes) into 8 minutes parts:
            > nk_music_download -s

        Print local (downloaded) songs duration:
            > nk_music_download -p

        Download playlist songs from 5 to 7:
            > nk_music_download 5 7 -d

    Limitations: Maximum of 100 songs can be downloaded!
                 start_index must be less than or equal to 100!
                 stop_index  must be less than or equal to 100!
    """)


# parse arguments
def parse_args():
    download      = False
    songs_range   = False
    links         = False
    help_needed   = False
    invalid_param = False
    split         = False
    only_split    = False
    print_songs   = False
    only_print    = False
    args_num      = 0

    for i in range(1, len(sys.argv)):
        # download songs
        if (sys.argv[i] == '-d'):
            download = True

        # print links
        if (sys.argv[i] == '-l'):
            links = True

        # split mixes
        if (sys.argv[i] == '-s'):
            split = True
            if(len(sys.argv) == 2):
                only_split = True

        # print duration
        if (sys.argv[i] == '-p'):
            print_songs = True
            if(len(sys.argv) == 2):
                only_print = True

        # count number of integer parameters
        if (sys.argv[i].isdigit()):
            args_num += 1


        # check if user entered invalid parameter
        if ((not sys.argv[i].isdigit()) and \
             sys.argv[i] != '-l' and \
             sys.argv[i] != '-s' and \
             sys.argv[i] != '-p' and \
             sys.argv[i] != '-d'):
            invalid_param = True

    # outside of for loop
    #  print(args_num)
    if args_num == 2:
        songs_range = True

    # check if printing of help is needed
    if len(sys.argv) < 2 or \
       invalid_param == True or \
       args_num > 2 or \
       sys.argv[1] == "-h" or \
       sys.argv[1] == "--help":
           help_needed = True

    # return values
    return help_needed, download, songs_range, links, split, only_split, print_songs, only_print


# parse user arguments
help_needed, download, songs_range, links, split, only_split, print_songs, only_print = parse_args()

# print help if needed and exit
if help_needed:
    print_help()
    #  print_duration()
    exit(1)

# print message for download instructions
def download_msg():
    print()
    print("NK: In order to download files run:")

    # print "> nk_music_download 1 2 -d"
    print('    > nk_music_download', end=' ')
    # print user input
    for i in range(1, len(sys.argv)):
        # dont print link(-l) flag
        if sys.argv[i] != '-l':
            print(sys.argv[i], end=' ')
    # print download(-d) flag
    print('-d')

# print additional messages when needed
def print_additional_msg(download):
    if not download:
        download_msg()

#  print_duration()

# print help if something goes wrong
try:
    # if only split mixes(-s) option is specified
    if only_split:
        split_mixes()
    # if only print songs option is specified
    elif only_print:
        print_duration()
    # download songs
    else:
        # download songs from playlist
        downloadPlaylistLinks('https://www.youtube.com/playlist?list=PLqqxFBxt_EUsLoX4F37iByy0ys4BZT8zi', download, songs_range, links)
        print_additional_msg(download)

    # split mixes
    if split and (not only_split):
        split_mixes()

    # print duration
    if print_songs and (not only_print):
        print_duration()
except:
    #  print help
    print_help()
