
" <<<Basic vim setup - Linux and Win
    " " Colors
        " colorscheme desert

    " " Various
        " syntax on
        " set clipboard=unnamedplus

    " " Set leader key
        " let mapleader=" "

    " " Tab
        " filetype plugin indent on
        " set expandtab       " Expand TABs to spaces
        " set tabstop=4       " The width of a TAB is set to 4.
        " set softtabstop=4
        " set shiftwidth=4
        " set smarttab

    " " Swap
        " set noswapfile
        " set nobackup

    " " Whitespace characters
        " set list
        " set listchars=tab:>-,trail:~,extends:>,precedes:<

    " " Map :W to :w
        " command W w
        " command Q q
        " command Qa qa

    " " Clean trailing characters
        " nnoremap <leader>k :call NK_CleanTrailingChars()<CR>

        " function! NK_CleanTrailingChars()
            " let ln_number = line(".")
            " execute '%s/\s\+$//'
            " execute 'normal '.ln_number.'G'
        " endfunc

    " " Clean search
        " nnoremap <leader>/c :nohlsearch<CR>

    " " Incremental search
        " set incsearch

    " " Save clipboard on exit
            " autocmd VimLeave * call system("xclip -selection clipboard", getreg('+'))

    " " Show line numbers
        " set number
        " set relativenumber

    " " Remap ; to :
        " nnoremap ; :

" Basic vim setup - Linux and Win>>>

" TODO
    "* Make vimrc backups often
        " DONE - Search tags by filename
        " DONE - Open Netrw files in custom window, stay in netrw
        " DONE - edit remote files
        " DONE - undo history percent sign replace
        " DONE - vim compatibility or switches
        " DONE - Go to definition of variable and list all matches - "[i", "[I" - /ref/ - http://usevim.com/2013/08/02/include-file-searches/
        " DONE - Open tags in vertical split and remain focus on active window
        " DONE - Add installation requirements for Linux and Windows
        " DONE - Unite open with external app - <C-x>
        " DONE - Setup GVIM for MS Windows
        " DONE - Install Unite (Greate Plugin!) and use instead of CtrlP
        " DONE - Fixed autocomplete colors
        " DONE - Set backup and swap directories
        " DONE - Search and replace in directories
        " DONE - Search and replace in buffers - http://www.thegeekstuff.com/2009/04/vi-vim-editor-search-and-replace-examples/
        " DONE - tags
        " DONE - Code folding
        " DONE - gundo
        " DONE - Shift + Arrow insert mode

" Default mappings and explanation, default keys
    " :help index
" All current mappings
    " :map

" Installation
    " Linux
        " - Install "gvim" or "vim-X11"
        " - Install "Vundle" or "Neobundle"
            " - Vundle - "https://github.com/VundleVim/Vundle.vim"
                " - "git clone https://github.com/VundleVim/Vundle.vim.git ~/.vim/bundle/Vundle.vim"
                " - Copy your custom vimrc to "~/.vimrc"
                " - Run "gvim" and run command ":PluginInstall"
                " - Restart "gvim"
            " - Neobundle - "https://github.com/Shougo/neobundle.vim"
                " - $ curl https://raw.githubusercontent.com/Shougo/neobundle.vim/master/bin/install.sh > install.sh
                " - $ sh ./install.sh
            " - Syntastic
                " - If you want parser for verilog, download "verilator"
                " - If you want parser for bash, install "shellcheck"
                " - Support - "https://github.com/scrooloose/syntastic/wiki/Syntax-Checkers"

    " Windows
        " - Install "gvim"
        " - Install "cygwin", - https://cygwin.com/install.html
                  " "git",  - https://git-scm.com/download/win
                  " "MinGW" - http://sourceforge.net/projects/mingw-w64/
        " - Add "bin" directories to "%PATH%", "MinGW" before "cygwin" and "git" because of "gcc"

        " - Install "Vundle" or "Neobundle" (see in Linux section) - requires "curl", available in git bin
        " - Download aldmeris (oblivion like) colorscheme from - https://github.com/veloce/vim-aldmeris
        " - "Syntastic" - (Requires MinGWCheck "gcc" on sample file "a.c" from terminal before trying syntastic - "gcc a.c"
        "               - In "%PATH%" make sure "MinGW bin" is before "cygwin" and "git" bins because of "gcc"
        "               - Support - "https://github.com/scrooloose/syntastic/wiki/Syntax-Checkers"

" Good examples and practices
    "        https://bitbucket.org/sjl/dotfiles/src/cbbbc897e9b3/vim/vimrc?fileviewer=file-view-default
    "        https://www.youtube.com/watch?v=rfl9KQb_HVk
    "        http://learnvimscriptthehardway.stevelosh.com/
    "        http://dougblack.io/words/a-good-vimrc.html
    "        https://github.com/osfameron/vimrc/blob/master/.vimrc
    "        https://github.com/gabriellima/dotvim/blob/master/vimrc
    "        http://amix.dk/vim/vimrc.html
    "        https://github.com/search?utf8=%E2%9C%93&q=vimrc
    "        https://github.com/VundleVim/Vundle.vim/wiki/Examples
    "        https://sheerun.net/2014/03/21/how-to-boost-your-vim-productivity/

" Cheatsheets
    " http://www.fprintf.net/vimCheatSheet.html

" Special OS keys
    " Ctrl-I      Tab
    " Ctrl-[      Esc
    " Ctrl-M      Enter
    " Ctrl-H      Backspace

" Set leader key
    let mapleader=" "
    " nnoremap <leader> :echo("\<leader\> works! It is set to <leader>")<CR>

" .vim directory unix and vimfiles ms ws
    if has("unix")
        let g:nk_vim_dir = $HOME."/.vim"
    else
        let g:nk_vim_dir  = $HOME."/vimfiles"
    endif

" Vundle
    " Install plugins from command line
    " vim +PluginInstall +qall

    " Put this at the top of your `.vimrc` to use Vundle. Remove plugins you don't need, they are for illustration purposes.
    set nocompatible              " be iMproved, required
    filetype off                  " required

    " set the runtime path to include Vundle and initialize
if has("unix")
    set rtp+=$HOME/.vim/bundle/Vundle.vim
    call vundle#begin()
else
    set rtp+=$HOME/vimfiles/bundle/Vundle.vim/
    call vundle#begin('$USERPROFILE/vimfiles/bundle/')
endif
    " alternatively, pass a path where Vundle should install plugins
    "call vundle#begin('~/some/path/here')

    " let Vundle manage Vundle, required
    Plugin 'VundleVim/Vundle.vim'

    " The following are examples of different formats supported.
    " Keep Plugin commands between vundle#begin/end.
    " plugin on GitHub repo
    "Plugin 'tpope/vim-fugitive'
    " plugin from http://vim-scripts.org/vim/scripts.html
    "Plugin 'L9'
    " Git plugin not hosted on GitHub
    "Plugin 'git://git.wincent.com/command-t.git'
    " git repos on your local machine (i.e. when working on your own plugin)
    "Plugin 'file:///home/gmarik/path/to/plugin'
    " The sparkup vim script is in a subdirectory of this repo called vim.
    " Pass the path to set the runtimepath properly.
    "Plugin 'rstacruz/sparkup', {'rtp': 'vim/'}
    " Avoid a name conflict with L9
    "Plugin 'user/L9', {'name': 'newL9'}


" <<<<< Plugins <<<<<

    "Airline plugin
        Plugin 'vim-airline/vim-airline'
        " Enable the list of buffers
        let g:airline#extensions#tabline#enabled = 1

        " Dont show tabs
        " enable/disable displaying tabs, regardless of number. >
        let g:airline#extensions#tabline#show_tabs = 0

        " Show just the filename and buffer number
        let g:airline#extensions#tabline#fnamemod = ':t'
        let g:airline#extensions#tabline#buffer_nr_show = 1

        " Buffer line extension
        let g:airline#extensions#bufferline#enabled = 0

        " Dont show mode when window is inactive
        let g:airline_inactive_collapse=0

        " let g:airline_theme = 'dark'
        " let g:airline_theme = 'sol'

        " Fix horizontal split color
        let g:airline_theme_patch_func = 'AirlineThemePatch'
        function! AirlineThemePatch(palette)
            " if g:airline_theme == 'base16' && g:colors_name == 'base16-eighties'
            " let better_ui_colors = ['#515151', '#a09f93', 19, 20]
            " let better_ui_colors = ['#000000', '#239b56', 19, 20]
            " let better_ui_colors = ['#000000', '#a09f93', 19, 20]
            if has("gui_running")
                " for gui only 2 first numbers are important
                let better_ui_colors = ['#000000', '#f2f3f4', 19, 20]
                " Choose colors:
                    " http://htmlcolorcodes.com/
            else
                " for terminal only 2 last numbers are important
                " 16 for black letters, 255 for white background

                " For newer vim versions might be problem with 128, use [0, 0, ...] then
                " let better_ui_colors = [0, 0, 16, 255]
                if v:version >= 704
                " if v:version >= 704 && has('patch2143')
                    " let better_ui_colors = [0, 0, 16, 255]
                    let better_ui_colors = ["White", "White", 16, 255]
                else
                    let better_ui_colors = [128, 128, 16, 255]
                endif

                " Choose colors:
                    " http://stackoverflow.com/a/16748521/2450748
            endif
            " let a:palette['normal']['airline_c'] = better_ui_colors
            " let a:palette['normal']['airline_x'] = better_ui_colors
            " let a:palette['inactive_modified']['airline_c'] = [ '#a70200', '', 88, '']
            for section in keys(a:palette['inactive'])
              if section != 'airline_warning'
                let a:palette['inactive'][section] = better_ui_colors
              endif
            endfor
            " endif
        endfunction
            " https://github.com/nikhgupta/dotfiles/blob/0436567e93651f960d747d0cf18b378aacbf4ce0/vimrc#L448

        " Show current working directory on the right side - https://github.com/vim-airline/vim-airline/blob/master/doc/airline.txt#L219
        " let g:airline_section_b = '%.40{getcwd()}'
        " let g:airline_section_y = g:airline_section_b
        let g:airline_section_b = '%.50{getcwd()}'
        " let g:airline_section_d = 'fugitive#head()'
        " let g:airline_section_c = '%.50{getcwd()}'
        " let g:airline_section_c = '%{expand('%:t')'
        let g:airline_section_y = '%{&fileformat}'

        " let g:airline_left_sep='>'

            " Set '>' as separator
            " let g:airline#extensions#tabline#left_sep = ' '
            " let g:airline#extensions#tabline#right_sep = '>'
            " let g:airline#extensions#tabline#left_alt_sep = '|'


                " /ref/ http://joshldavis.com/2014/04/05/vim-tab-madness-buffers-vs-tabs/

    " Syntastic - for MS Windows install MinGW c compiler - /ref/ http://sourceforge.net/projects/mingw-w64/?source=typ_redirect
        " syntastic does basic QuickFix stuffs, and integrates nicely with Powerline
        Plugin 'scrooloose/syntastic'

        " Check syntax when opening a file
        let g:syntastic_check_on_open = 1

        " Show warnings for C files
        let g:syntastic_c_compiler_options = "-Wall"

        " Show warnings for CPP files
        let g:syntastic_cpp_compiler_options = "-Wall"

        " let g:syntastic_error_symbol = "!"

        " - If you want parser for verilog, download "verilator"
        " - Support - "https://github.com/scrooloose/syntastic/wiki/Verilog:---verilator"
        " Parse as SystemVerilog files
            let g:syntastic_verilog_compiler_options = "-Wall -sv"
            " let g:syntastic_verilog_compiler = "iverilog"
            " let g:syntastic_verilog_compiler = "verilator"

        "Disable syntastic check
            " let g:syntastic_mode_map = { 'mode': 'passive', 'active_filetypes': [],'passive_filetypes': [] }
            " :SyntasticToggleMode
                " /ref/ http://stackoverflow.com/a/21434697/2450748
                " let g:syntastic_mode_map = { 'mode': 'passive', 'active_filetypes': [],'passive_filetypes': [] }
                " nnoremap <F11> :SyntasticCheck<CR> :SyntasticToggleMode<CR>
                nnoremap <leader>zss :SyntasticToggleMode<CR>:e<CR>
                nnoremap <leader>zsc :SyntasticCheck<CR>

        " python checker
            let g:syntastic_python_checkers = ['python']
            " let g:syntastic_python_checkers = ['pylint']
                " https://github.com/scrooloose/syntastic#faqcheckers

        " bash checker - ShellCheck
            let g:syntastic_quiet_messages = {
                        \ "regex":  [ "SC2086", "SC2046", "SC2038", "SC2033", "SC2034" ] }

        " Enable Syntastic warnings by default
            " let g:syntastic_quiet_messages = {}

            " Toggle Syntastic warnings
            function! NK_ToggleSyntasticWarnings()
                if exists('t:nk_warnings') && t:nk_warnings
                    " Show warnings
                    let t:nk_warnings = 0
                    let g:syntastic_quiet_messages = {}
                    SyntasticReset
                    :e
                else
                    " Dont show warnings
                    let t:nk_warnings = 1
                    let g:syntastic_quiet_messages = {
                        \ "level":  "warnings"}
                    SyntasticReset
                    :e
                endif
            endfunc

            nnoremap <leader>; :call NK_ToggleSyntasticWarnings()<CR>

        " autocmd VimEnter * call NK_NoSyntasticWarnings()

    " CtrlP
   " Plugin 'kien/ctrlp.vim'
   " let g:ctrlp_extensions = ['tag']
   "     " /ref/ https://github.com/ctrlpvim/ctrlp.vim#once-ctrlp-is-open
   "     " /ref/ https://www.youtube.com/watch?v=8XGueeQJsrA
   "     "
   "     " map <leader>f :CtrlPMixed<CR>
   "     " map <leader>l :CtrlPLine<CR>
   "     " map <leader>b :CtrlPBuffer<CR>
   "     " map <leader>b :CtrlPBookmarkDir<CR>

   " let g:ctrlp_max_files=0
   " let g:ctrlp_max_depth=0
   " let g:ctrlp_regexp = 1
   " let g:ctrlp_follow_symlinks = 1
   " let g:ctrlp_show_hidden = 1
   "     " let g:ctrlp_user_command = 'find %s -type f'        " MacOSX/Linux
   "     " Setup some default ignores
   "     " let g:ctrlp_custom_ignore = {
   "     "  \ 'dir':  '\v[\/](\.(git|hg|svn)|\_site)$',
   "     "  \ 'file': '\v\.(exe|so|dll|class|png|jpg|jpeg)$',
   "     " \}
   " let g:ctrlp_working_path_mode = 0

    " Unite
        Plugin 'Shougo/unite.vim'
        " Plugin 'tsukkee/unite-tag'

        " nnoremap <buffer> <C-]> :<C-u>UniteWithCursorWord -immediately tag<CR>

        " Get help - type g? in normal mode
        " g?

        " Close
        " <C-g> or "q" in normal mode, "Q" to close all Unite windows
        " [ - Go back one directory, up to the pwd, cannot go to root / for example (if it is not pwd=/)

        " <C-j> - auto preview

        " <C-f> - Expand directory and search for files

        " <Space> - Select multiple files and open them

        " b - bookmark file/directory

        " cd - (normal mode) Change current directory to selected directory - Great one

        " let g:unite_source_history_yank_enable = 1
        " let g:unite_source_grep_command = 'grep'

        " all commands are in normal mode by default - interesting
        map <leader>r :Unite buffer -smartcase -vertical-preview<CR>i
        " map <leader>f :Unite buffer file<CR>i
        map <leader>ff :Unite file_rec -start-insert -smartcase -vertical-preview -keep-focus -no-quit<CR>
        " map <leader>ft :Unite file -start-insert -smartcase -keep-focus -no-quit<CR>
        map <leader>ft :Unite file -start-insert -smartcase -keep-focus -no-quit<CR>
        map <leader>fb :Unite bookmark -start-insert -smartcase<CR>
        " /ref/ http://stackoverflow.com/questions/21878402/how-to-navigate-results-candidates-in-unite-vim
        map <leader>fr :UniteResume<CR>
        map <leader>fc :UniteClose<CR>
        " map <leader>f :Unite -smartcase -start-insert buffer file_rec/async:!<CR>
        " map <leader>f :Unite file_rec buffer <CR>i**/

    " let g:unite_source_file_rec_max_cache_files = 0

            " Unite window settings
            autocmd FileType unite call s:unite_my_settings()
            function! s:unite_my_settings()"{{{
                " Overwrite settings.

            " Default action - Enter replace with C-l"
                " imap <buffer> <C-l>     <Plug>(unite_do_default_action)
            " Important for backward path in tree mode"
                nmap <buffer> [     <Plug>(unite_delete_backward_path)
                " You probably wont use [ for file names so it is ok to stay also in insert mode"
                imap <buffer> [     <Plug>(unite_delete_backward_path)
            "Vertical split"
                imap <silent><buffer><expr> <C-v> unite#do_action('vsplit')
            "Copy to command line in order to open using external application
                nmap <silent><buffer><expr> <C-x> unite#do_action('ex')
                imap <silent><buffer><expr> <C-x> unite#do_action('ex')
            " Change current directory, or local for window (lcd)
                nnoremap <silent><buffer><expr> <C-d>     unite#do_action('cd')
                inoremap <silent><buffer><expr> <C-d>     unite#do_action('cd')
                nnoremap <silent><buffer><expr> lcd     unite#do_action('lcd')
                " nnoremap <silent><buffer><expr> cd     unite#do_action('cd')
            " Expand directory and search files
                inoremap <silent><buffer><expr> <C-a>     unite#do_action('rec_parent')
                nnoremap <silent><buffer><expr> <C-a>     unite#do_action('rec_parent')
                inoremap <silent><buffer><expr> <C-f>     unite#do_action('rec')
                nnoremap <silent><buffer><expr> <C-f>     unite#do_action('rec')

                nmap <buffer> '     <Plug>(unite_input_directory)


                nmap <buffer> <C-p>     <Plug>(unite_toggle_auto_preview)
                imap <buffer> <C-p>     <Plug>(unite_toggle_auto_preview)

                imap <buffer> jj      <Plug>(unite_insert_leave)
                "imap <buffer> <C-w>     <Plug>(unite_delete_backward_path)

                imap <buffer><expr> j unite#smart_map('j', '')
                " imap <buffer> <TAB>   <Plug>(unite_select_next_line)
                imap <buffer> '     <Plug>(unite_quick_match_default_action)
                nmap <buffer> '     <Plug>(unite_quick_match_default_action)
                imap <buffer><expr> x
                        \ unite#smart_map('x', "\<Plug>(unite_quick_match_jump)")
                nmap <buffer> x     <Plug>(unite_quick_match_jump)
                nmap <buffer> <C-r>     <Plug>(unite_toggle_transpose_window)
                imap <buffer> <C-r>     <Plug>(unite_toggle_transpose_window)
                " nmap <buffer> <C-r>     <Plug>(unite_narrowing_input_history)
                " imap <buffer> <C-r>     <Plug>(unite_narrowing_input_history)
                " nnoremap <silent><buffer><expr> l
                "       \ unite#smart_map('l', unite#do_action('default'))

                let unite = unite#get_current_unite()
                if unite.profile_name ==# 'search'
                  nnoremap <silent><buffer><expr> r     unite#do_action('replace')
                else
                  nnoremap <silent><buffer><expr> r     unite#do_action('rename')
                endif

                nnoremap <buffer><expr> S      unite#mappings#set_current_filters(
                        \ empty(unite#mappings#get_current_filters()) ?
                        \ ['sorter_reverse'] : [])

                " Runs "split" action by <C-s>.
                imap <silent><buffer><expr> <C-s>     unite#do_action('split')
            endfunction"}}}

        " let g:unite_source_codesearch_ignore_case = 1

        " Make search case insensitive - :
        " call unite#custom#profile('ignorecase','context.ignorecase',1)
        " call unite#custom#profile('source/command',
        "  \ 'context', {
        "  \   'smartcase': 1,
        "  \ })
        " call unite#custom#profile('ignorecase','smartcase',1)

    " Vimfiler
        Plugin 'Shougo/vimfiler.vim'
        " /ref/ https://github.com/Shougo/vimfiler.vim/blob/master/doc/vimfiler.txt

        " Alt key bugy colapses directory if it is a symbolic link! (probably refresh is run)
        " t, T  -> expand directory, recursively
        " gs    -> Exit/enter safe mode
        " gc    -> Change current working directory (pwd)
        " <C-l> -> refresh directories/files
        " a,s   -> choose window after enter
            " /ref/ https://github.com/Shougo/vimfiler.vim/issues/157
        " gS    -> Hide modified date/time/size
        " S     -> Select sort type - size, name, extension, ...
        " E     -> Open(edit) file in vertical split
        " K     -> Make create directory
        " N     -> New file
        " dd    -> delete file
        " H     -> open shell, exit shell by typing "exit"


        " links are collapsed when toggled, than use <leader>er (read vimfiller buffer)

        let g:vimfiler_as_default_explorer = 1

        noremap <leader>ee :VimFiler           -buffer-name=@cwd_vf     -no-quit -split -direction= -simple<CR>
        " Open previous tree, doesn't collapse symbolic links
        noremap <leader>er :call NK_OpenVertBuffer("@cwd_vf")<CR>
        " noremap <leader>er :vsp "@cwd"<CR>
        " noremap <leader>ee :VimFiler           -buffer-name=@cwd_vf     -no-quit -split -direction= -simple -toggle<CR>
        noremap <leader>ew :VimFilerCurrentDir -buffer-name=@cwd_cf     -no-quit -split -direction= -simple<CR>
        noremap <leader>eb :VimFilerBufferDir  -buffer-name=@buffer_vf  -no-quit -split -direction= -simple<CR>

        " Open custom buffer in vsplit
        function! NK_OpenVertBuffer(name_part)
            let buffer_num=bufnr(a:name_part)
            execute "vert sb ".buffer_num
        endfunc

        " return buffer number of buffer with name @cwd_vf
            " :echo bufnr('@cwd_vf')

        " nnoremap <silent><buffer><expr> <C-x>     unite#do_action('cd')
        " nnoremap <C-x> <Plug>(vimfiler_switch_to_history_directory)
        autocmd FileType vimfiler nunmap <buffer> <C-j>
        " autocmd FileType vimfiler nmap  h <Plug>(vimfiler_switch_to_history_directory)
        " autocmd FileType vimfiler nunmap <buffer> <CR>
        autocmd FileType vimfiler nunmap <buffer> <Space>
        autocmd FileType vimfiler nmap  s <Plug>(vimfiler_toggle_mark_current_line)
        " /ref/ https://github.com/Shougo/vimfiler.vim/issues/178
        " autocmd FileType vimfiler unmap  <C-j>
        " autocmd FileType vimfiler nmap  [ <Plug>(vimfiler_cd_or_edit)
        " autocmd FileType vimfiler nmap  <CR> <Plug>(vimfiler_expand_tree)

        " autocmd FileType vimfiler nmap <buffer> <C-R>  <Plug>(vimfiler_redraw_screen)
        " autocmd FileType vimfiler nmap  <C-j> :bn!<CR>
        " noremap <C-j> :bn!<CR>

    " Vimshell Shougo
        " Plugin 'Shougo/vimshell.vim'

    " SuperTab
        Plugin 'ervandew/supertab'
        " let g:SuperTabDefaultCompletionType = 'context'
        let g:SuperTabDefaultCompletionType = "<c-n>"

        inoremap <C-k> <C-x><C-o>

        " Run OmniComplete when "." is pressed in python files (and if it is not number before dot)
        function! OpenCompletion()
            if !pumvisible() && ((&filetype == "python") && (&omnifunc != '') && (v:char == '.'))
                if NK_not_number_before_dot()
                    call feedkeys("\<C-x>\<C-o>", "n")
                endif
            endif
        endfunction
        " https://stackoverflow.com/a/47967462/2450748
        autocmd InsertCharPre * call OpenCompletion()

        " Check if word before "." is number - example "34." -> dont run omnicompletion
        function! NK_not_number_before_dot()
            " Get current cursor position
            let save_pos = getpos(".")
            " Go left one character
            call setpos('.', [0, save_pos[1], save_pos[2]-1, 0])
            " Get word under cursor
            let current_word=expand("<cword>")
            " Restore cursor position to previous position
            call setpos('.', save_pos)
                " echo "Word: ".current_word."".type(current_word)
                " echo "Word: ".current_word
            " If current word is not number return 1
            if current_word !~# '^\d\+$'
                " echo "Not Number!"
                return 1
            endif
            " https://stackoverflow.com/a/15849609/2450748
        endfunc
        " nnoremap <leader>pp :call NK_not_number_before_dot()<CR>

        " Suppress message that Completion Pattern was not found

        " if v:version >= 704
        if v:version >= 704 && has('patch314')
            setlocal shortmess+=c
                " https://stackoverflow.com/a/37988742/2450748
        endif

        " python (Gtk) omnicomplete <C-x><C-o> hangs in Vim - fix:
            " https://github.com/Shougo/neocomplcache.vim/issues/181
            " https://groups.google.com/forum/#!topic/vim_dev/WBkdF269lyI
            " http://stackoverflow.com/a/2245120/2450748
        " let b:SuperTabDisabled = 1

    " vim-move - Move lines up down
        " Join lines
        noremap <leader>j J
            " http://stackoverflow.com/questions/1218390/what-is-your-most-productive-shortcut-with-vim?rq=1

        Bundle 'matze/vim-move'
        " Use Ctrl instead of Alt
        let g:move_key_modifier = 'S'
        let g:move_auto_indent = 0
        " Use <C-v> to select multiple lines
        " <C-k>   Move current line/selections up
        " <C-j>   Move current line/selections down

    " Gundo - changes history - not working in MS Windows because "Gundo requires Vim to be compiled with Python 2.4+"
    " Use 'undotree' plugin in Windows instead
    " if has("unix")
        " Plugin 'sjl/gundo.vim'
            " " /ref/ http://sjl.bitbucket.org/gundo.vim/

            " " NK - Last acitve file not showing history immediatly, but switch to other buffer and go back and
            " "      everything will be fine

            " nnoremap <leader>ut :GundoToggle<CR>
            " " Stay in gundo tree when applying revert changes
            " let g:gundo_return_on_revert = 0
            " let g:gundo_playback_delay = 1000
    " else

    " Undo tree
        Plugin 'mbbill/undotree'

        let g:undotree_SetFocusWhenToggle = 1
        nnoremap <leader>ut :UndotreeToggle<CR>

        " Use "J" and "K" to switch states
        " Use "T" to show absolute timestamps

    " endif

    " vim-bookmarks
        Plugin 'MattesGroeger/vim-bookmarks'
        " let g:bookmark_highlight_lines = 1
            " :BookmarkSave
            " :BookmarkLoad
        " autocmd VimLeave * call QuitBookmarkSave()
        " autocmd VimEnter * call EnterBookmarkLoad()
            " autocmd VimLeave * :BookmarkSave ~/.vim/a.bookmarks.vim
            " let session_nk = ".g:session_dir."/".s.".session.vim"
        " let g:bookmark_highlight_lines = 1
        " highlight BookmarkLine ctermbg=darkcyan ctermfg=blue
        " let g:bookmark_highlight_lines = 1

        let g:bookmark_no_default_key_mappings = 1
        if has("win32") || has("win16")
            let g:bookmark_sign = '*'
        endif

        nnoremap <leader>ma :Unite vim_bookmarks -start-insert -smartcase<CR>
        nnoremap <leader>mm :BookmarkToggle<CR>
        nnoremap <leader>mi :BookmarkAnnotate<CR>
        " nnoremap <leader>ma :BookmarkShowAll<CR>
        nnoremap <leader>mn :BookmarkNext<CR>
        nnoremap <leader>mp :BookmarkPrev<CR>
        nnoremap <leader>mc :BookmarkClear<CR>
        nnoremap <leader>mx :BookmarkClearAll<CR>
        nnoremap <leader>mkk :BookmarkMoveUp<CR>
        nnoremap <leader>mjj :BookmarkMoveDown<CR>
        " vnoremap mn :BookmarkNext<CR>
        " vnoremap mp :BookmarkPrev<CR>

    " Grep
        Plugin 'yegappan/grep'
        let Grep_Default_Options = '-R'
        " or use built in :cw
        " :grep promena *
        " :cw
        "    or
        " :vimgrep promena *
        " :cw
        " :cn, :cp, ...
        " :cnefile
        " /ref/ http://stackoverflow.com/questions/7880372/how-to-jump-between-patterns-when-using-vimgrep-quickfix-list

    " Tabularize
        Plugin 'godlygeek/tabular'

        noremap <leader>a=  :Tabularize /=<CR>

        " Align to space with ending ;
        noremap <leader>a; :Tabularize /\S\+;$/l1<CR>
        noremap <leader>a<leader>  :Tabularize /\S\+<CR>
            " http://stackoverflow.com/questions/13542478/aligning-text-in-vim-according-to-whitespace-using-tabularize-plugin

        noremap <leader>a: :Tabularize /:<CR>
        noremap <leader>a. :Tabularize /\.<CR>
        " ,/l0r1 - 0 spaces on the left side of "," and 1 space on right side of ","
        " noremap <leader>a, :Tabularize /,/l0r1<CR>
        noremap <leader>a, :Tabularize /,<CR>
        noremap <leader>a( :Tabularize /(<CR>
        noremap <leader>a) :Tabularize /)<CR>
        noremap <leader>a< :Tabularize /<<CR>
        noremap <leader>a> :Tabularize /><CR>
        noremap <leader>a- :Tabularize /- <CR>

        " Align by digits/numbers
        noremap <leader>an :Tabularize /[0-9]<CR>

        " Align only on first occurence
        noremap <leader>a1= :Tabularize /=.*<CR>
        noremap <leader>a1: :Tabularize /:.*<CR>
        noremap <leader>a1. :Tabularize /\..*<CR>
        noremap <leader>a1( :Tabularize /(.*<CR>
        noremap <leader>a1) :Tabularize /).*<CR>
        noremap <leader>a1< :Tabularize /<.*<CR>
        noremap <leader>a1> :Tabularize />.*<CR>
        noremap <leader>a1n :Tabularize /[0-9].*<CR>
        noremap <leader>a1- :Tabularize /- .*<CR>
            " /ref/ http://stackoverflow.com/questions/11497593/vim-tabular-only-on-the-first-match-on-the-line
            " http://stackoverflow.com/questions/23071787/how-to-match-against-only-first-in-vim-using-tabular-ignoring

    " Align - not working in MS Windows
        "Plugin 'vim-scripts/Align'

        " nnoremap <leader>a= :Align /=<CR>
        " nnoremap <leader>a= :Align /=<CR>

    " NERD commenter
        Plugin 'scrooloose/nerdcommenter'

        " *'NERDCreateDefaultMappings'*
        " /ref/ http://ruderich.org/simon/config/vimrc
        map <leader><leader> <plug>NERDCommenterToggle
        " map <leader>bb <plug>NERDCommenterAltDelims
        " map ,t <plug>NERDCommenterToggleComment
        " map ,omg <plug>NERDCommenterComment
        let g:NERDCreateDefaultMappings = 0
        let g:NERDSpaceDelims = 1
        let g:NERDRemoveAltComs = 1
        " let g:NERDComAltDelim = 1
        " let g:NERD_c_alt_style=1
        let g:NERDAltDelims_c = 1

    " Yank Ring
        " Plugin 'vim-scripts/YankRing.vim'

        " let g:yankring_history_dir = g:nk_vim_dir
        " let g:yankring_history_file = 'yankring_history'
        " noremap <leader>yy :YRShow<CR>
        " "0p - paste last yanked register
            " So in the above example, the text from the initial example is moved into the default register,
            " and then replaced there by the deleted text.
            " But it remains in the 0 register, which always points to the last "yanked" text, ignoring text gained by deleting.


    " TagBar
        Plugin 'majutsushi/tagbar'
        " Additional languages
        " https://github.com/majutsushi/tagbar/wiki

        nnoremap <leader>tt :TagbarToggle<CR>

        " Vim built in - Use "[i" to show variable declaration
        let g:tagbar_autofocus = 1
        let g:tagbar_sort = 0
        " Use "s" to change sorting method
        " let g:tagbar_show_linenumbers = 1

        let g:tagbar_map_showproto = "i"
        set updatetime=500 " general vim config that affects TagBar refresh rate
        " set updatetime=4000 " default
            " TODO: low 'updatetime' can cause vim glitches, watch out
            " https://github.com/airblade/vim-gitgutter#when-are-the-signs-updated
            " https://github.com/fatih/vim-go/blob/master/ftplugin/go.vim#L43
            " :help updatetime

        " Use "i" to show function prototype

        " Use "o" to collapse/expand functions, classes, ...

        " /ref/ http://www.farseer.cn/config/2013/08/02/replace-deprecated-vim-plugins-with-modern-alternatives/
        let g:tagbar_type_vhdl = {
             \ 'ctagstype': 'vhdl',
             \ 'kinds' : [
             \'d:prototypes',
             \'b:package bodies',
             \'e:entities',
             \'a:architectures',
             \'C:components',
             \'i:instances',
             \'p:processes',
             \'t:types',
             \'f:functions',
             \'r:procedures',
             \'c:constants',
             \'T:subtypes',
             \'r:records',
             \'P:packages',
             \'l:locals'
             \],
             \}
             " \'sro': ' ',
             " \ 'kind2scope' : {
             " \ 'entities'      : 'e',
             " \ 'architectures' : 'a',
             " \ }
             " \ }

        let g:tagbar_type_systemverilog = {
            \ 'ctagstype' : 'systemverilog',
            \ 'kinds'     : [
            \'c:classes',
            \'t:tasks',
            \'f:functions',
            \'m:modules',
            \'i:interfaces',
            \'v:variables',
            \'d:defines',
            \'e:typedefs',
            \'a:parameters'
            \]
            \}

        let g:tagbar_type_verilog = {
            \ 'ctagstype' : 'verilog',
            \ 'kinds'     : [
            \'p:ports',
            \'m:modules',
            \'f:functions',
            \'r:registers',
            \'n:nets',
            \'e:events',
            \'t:tasks'
            \]
            \}

    " Delete other buffers
        Plugin 'vim-scripts/BufOnly.vim'

    " Colorscheme approximation in terminals
        Plugin 'godlygeek/csapprox'

        set t_Co=256
            " /ref/ https://github.com/spf13/spf13-vim/issues/90
            " let g:CSApprox_hook_post = ['hi Normal  ctermbg=NONE ctermfg=NONE',
                                " \ 'hi NonText ctermbg=NONE ctermfg=NONE' ]

    " Rainbow parentheses
        " Plugin 'kien/rainbow_parentheses.vim'
        Plugin 'luochen1990/rainbow'
            let g:rainbow_active = 1
                                 " 0 if you want to enable it later via :RainbowToggle

    " Log files highlight
        Plugin 'dzeban/vim-log-syntax'

    " Compare directories with vimdiff
        Plugin 'will133/vim-dirdiff'
        " Example:
            " :DirDiff dir_a/ dir_b/

    " Syntax for wikidoc
        " Plugin 'vim-scripts/Wikidoc-syntax-highlighting'

    " Syntax for plantuml
        Plugin 'aklt/plantuml-syntax'

    " Async make, dispatch
        Plugin 'tpope/vim-dispatch'
        " noremap <leader>ll :Dispatch make all<CR>
        " :Dispatch! make all
            " https://vimeo.com/63116209
            " http://tilvim.com/2014/03/13/dispatch.html

    " Git fugitive
        Plugin 'tpope/vim-fugitive'

            nnoremap <leader>gs :Gstatus<CR>
            nnoremap <leader>gd :Gdiff<CR>
                " http://stackoverflow.com/a/28916959/2450748
            " nnoremap <leader>gh :Glog<CR><CR><CR>:vsp<CR> <C-w><C-w>:cnext<CR>:windo diffthis<CR>:let t:nk_git_log = 1<CR>
            nnoremap <leader>gh :call NK_GitDiff()<CR>
            " use ZoomToggle when needed - <leader>zz
            " noremap [g :cnext<CR><C-w><C-w>:cprev<CR>:windo diffthis<CR>
            " noremap [g :2wincmd w<CR>:cc<CR><C-w><C-w>:cnext<CR>:windo diffthis<CR>
            noremap [g :call NK_GitOlderDiff()<CR>
            " noremap ]g :1wincmd w<CR>:cprev<CR>:2wincmd w<CR>:cprev<CR>:windo diffthis<CR>
            noremap ]g :call NK_GitNewerDiff()<CR>
            " noremap ]g :cprev<CR><C-w><C-w>:cnext<CR>:windo diffthis<CR>
            " noremap ]g :2wincmd w<CR>:cc<CR>:1wincmd w<CR>:cprev<CR><C-w><C-r>:windo diffthis<CR>
            " noremap [G :2wincmd w<CR>:cfirst<CR><C-w><C-w>:cnext<CR>:windo diffthis<CR>:let t:nk_git_older = 0<CR>
            " noremap ]G :1wincmd w<CR>:clast<CR>:2wincmd w<CR>:cprev<CR>:windo diffthis<CR>:let t:nk_git_newer = 0<CR>
            noremap [G :call NK_GitDiffLast()<CR>
            noremap ]G :call NK_GitDiffFirst()<CR>

            function! NK_GitDiffLast()
                2wincmd w
                cfirst
                wincmd w
                cnext
                windo diffthis
                let t:nk_git_older = 0
                let t:nk_git_newer = 0
            endfunction

            function! NK_GitDiffFirst()
                1wincmd w
                clast
                2wincmd w
                cprev
                windo diffthis
                let t:nk_git_newer = 0
                let t:nk_git_older = 0
            endfunction

            function! NK_GitDiff()
                silent Glog
                vsp
                wincmd w
                cnext
                windo diffthis
                let t:nk_git_diff=1
                let t:nk_git_older = 0
                let t:nk_git_newer = 0
            endfunction

            function! NK_GitOlderDiff()
                if exists('t:nk_git_diff') && t:nk_git_diff
                    if exists('t:nk_git_newer') && t:nk_git_newer
                        2wincmd w
                        cnext
                        wincmd w
                        cnext
                        windo diffthis
                        let t:nk_git_newer = 0
                        let t:nk_git_older = 1
                    else
                        let t:nk_git_older = 1
                        2wincmd w
                        cc
                        wincmd w
                        try
                            cnext
                        catch /^Vim\%((\a\+)\)\=:E553/
                            echo "NK:First commit!"
                            2wincmd w
                            cprev
                            let t:nk_git_older = 0
                        endtry
                        windo diffthis
                    endif
                else
                    let t:nk_git_older = 1
                    call NK_GitDiff()
                endif
            endfunction

            function! NK_GitNewerDiff()
                if exists('t:nk_git_diff') && t:nk_git_diff
                    if exists('t:nk_git_older') && t:nk_git_older
                        1wincmd w
                        cprev
                        2wincmd w
                        cprev
                        windo diffthis
                        let t:nk_git_older = 0
                        let t:nk_git_newer = 1
                    else
                        let t:nk_git_newer = 1
                        1wincmd w
                        cc
                        2wincmd w
                        try
                            cprev
                        catch /^Vim\%((\a\+)\)\=:E553/
                            echo "NK: Latest commit!"
                            1wincmd w
                            cnext
                            2wincmd w
                            let t:nk_git_newer = 0
                        endtry
                        " https://github.com/scrooloose/syntastic/issues/32#issuecomment-40273385
                        windo diffthis
                    endif
                else
                    call NK_GitDiff()
                    let t:nk_git_older = 1
                endif
            endfunction

            " :diffthis - do this on two windows to compare only specified windows
                " http://stackoverflow.com/a/4385554/2450748
            " Get whole Log for specific branch
                " :Glog bAtomic2

            " nnoremap <leader>co :copen<CR>
            noremap ]q :cnext<CR>
            noremap [q :cprev<CR>
            noremap [Q :cfirst<CR>
            noremap ]Q :clast<CR>
            noremap [w :copen<CR>

            " ":help fugitive"

            " ":Gdiff" - show diff against repo file
            " ":Gvdiff" - force vertical diff files
                " https://github.com/tpope/vim-fugitive/issues/508#issuecomment-47018347
            " ":Gstatus" - show current status: modified files, branch ahead/behind
                " "D" - show diff for selected file
                " "-" - stage/unstage files
                " "cc" - commit staged files
                " http://stackoverflow.com/a/27341232/2450748

            " ":Git <custom_cmd> "- run git custom command, aliases work!
                " "Git log"
                " "Git glog"

    " Markdown plugin
        Plugin 'plasticboy/vim-markdown'

    " Vim Wiki plugin
        " https://www.youtube.com/watch?v=ONh95PNBW-Q
        " Plugin 'vimwiki/vimwiki'
            " let g:vimwiki_default_mappings='0'

        " noremap <leader>tt :VimwikiIndex<CR>
        autocmd FileType vimwiki noremap <buffer> <leader><leader> :VimwikiToggleListItem<CR>

    " Vimux
        Plugin 'benmills/vimux'

        let g:VimuxHeight = "30"
        let g:VimuxOrientation = "v"
        let VimuxUseNearest = 1

        " lc - launch command
        noremap <leader>lc :VimuxPromptCommand<CR>
        noremap <leader>ll :VimuxRunLastCommand<CR>
        noremap <leader>ls :VimuxInterruptRunner<CR>
        noremap <leader>lz :VimuxZoomRunner<CR>
        noremap <leader>le :VimuxInspectRunner<CR>

    " vim-cellmode
        " Plugin 'julienr/vim-cellmode'

        " " let g:cellmode_tmux_sessionname='ipython'  " Will try to automatically pickup tmux session
        " " let g:cellmode_tmux_windowname='ipython'
        " let g:cellmode_tmux_sessionname=''  " Will try to automatically pickup tmux session
        " let g:cellmode_tmux_windowname=''
        " let g:cellmode_tmux_panenumber='1'

        " let g:cellmode_screen_sessionname='ipython'
        " let g:cellmode_screen_window='0'

        " Default mappings - contribute
        " let g:cellmode_default_mappings='0'

        " Plugin works only in terminal mode
        " if !has("gui_running")

            " Unmap set plugin mappings to default
            " Workaround for now
            " autocmd VimEnter * unmap <C-c>
            " autocmd VimEnter * unmap <C-b>
            " autocmd VimEnter * unmap <C-g>
                " http://vi.stackexchange.com/a/785/8539

            " Custom plugin mappings
            " vnoremap <leader>pp :call RunTmuxPythonChunk()<CR>
            " nnoremap <leader>pp :call RunTmuxPythonCell(0)<CR>
            " noremap <leader>pa :call RunTmuxPythonAllCellsAbove()<CR><CR>
            " noremap <leader>ps :let g:cellmode_tmux_panenumber='1'<Left>

        " endif

    " Open Quickfix in custom window
        Plugin 'yssl/QFEnter'
            " https://github.com/yssl/QFEnter

        " <Enter>         - Open an item under cursor in the previously focused window
        " <leader><Enter> - Open in vertical split

    " Bitbake syntax
        Plugin 'kergoth/vim-bitbake'

    " org mode
        Plugin 'jceb/vim-orgmode'
        " Plugin 'hsitz/VimOrganizer'
            let g:org_todo_keywords=['TODO(t)', 'PROG(t)', '|', 'DONE(d)', 'PP(f)']
            " let g:org_todo_keywords = [['TODO(t)', '|', 'DONE(d)'],
                  " \ ['REPORT(r)', 'BUG(b)', 'KNOWNCAUSE(k)', '|', 'FIXED(f)'],
            " \ ['CANCELED(c)']]
    " vim-zim
        " Plugin 'jakykong/vim-zim'

    " Hg plugin - Vim mercenary
        Bundle 'phleet/vim-mercenary'
        " Plugin 'jlfwong/vim-mercenary'

    " python-mode
        " Plugin 'python-mode/python-mode'
        " let g:pymode_rope_completion = 1
        " let g:pymode_rope_complete_on_dot = 1
        " let g:pymode_rope_completion_bind = '<C-Space>'

    " jedi-vim
        Plugin 'davidhalter/jedi-vim'
            " " Installation
                " " > pip install jedi

            " Disable default keybindings:
                " https://github.com/davidhalter/jedi-vim/issues/213

            " " let g:jedi#auto_initialization = 0
            let g:jedi#completions_enabled = 0
            let g:jedi#auto_vim_configuration = 0

            let g:jedi#documentation_command = "<leader>lq"
            let g:jedi#max_doc_height = 30

            let g:jedi#show_call_signatures = "0"
            let g:jedi#popup_on_dot = 0
            let g:jedi#popup_select_first = 0
            let g:jedi#goto_command = "<Nop>"
            let g:jedi#goto_assignments_command = "<Nop>"
            let g:jedi#usages_command = "<Nop>"
            let g:jedi#completions_command = "<Nop>"
            let g:jedi#rename_command = "<Nop>"

            " let g:jedi#completions_command = "<Tab>"

    " conque-shell terminal emulator
        " Plugin 'vim-scripts/Conque-Shell'

    " vim-ipython
        " Plugin 'ivanov/vim-ipython'

    " Bash support
        " Plugin 'vim-scripts/bash-support.vim'
        " https://github.com/vim-scripts/bash-support.vim


    " Cpp OmniComplete
        " Plugin 'vim-scripts/OmniCppComplete'

    " Clang cpp omnicomplete
        Plugin 'Rip-Rip/clang_complete'

" >>>>> Plugins >>>>>

    " Print file
        " Plugin 'vim-scripts/Printer-Dialog'
        " let &printexpr="(v:cmdarg=='' ? ".
            " \"system('lpr' . (&printdevice == '' ? '' : ' -P' . &printdevice)".
            " \". ' ' . v:fname_in) . delete(v:fname_in) + v:shell_error".
            " \" : system('mv '.v:fname_in.' '.v:cmdarg) + v:shell_error)"
        " List printers
            " > lpstat -p -d
        " Test printer, print simple text from terminal
            " > echo "hello world" | lpr -P HP_LaserJet_400_M401dn
        set pdev=HP_LaserJet_400_M401dn
            " https://bbs.archlinux.org/viewtopic.php?id=36310
        " Print to file
            " :hardcopy > file.ps
        " Print to printer
            " :hardcopy
        " Print to HTML and then to pdf
            " :hi Normal ctermbg=white ctermfg=black " to print with thite background
                " :colorscheme morning " to print with thite background
            " :hi Error NONE " dont highligh errors
            " :TOhtml
            " :w
            " " print file
            " :source ~/.vimrc " to restore colors
                " http://stackoverflow.com/a/25389081/2450748
                " http://stackoverflow.com/a/8557573/2450748

    " Syntax for mercurial
        " Plugin 'DasIch/vim-mercurial'

    " Neocomplcache
        " Plugin 'Shougo/neocomplete.vim'
        " let g:neocomplete#enable_at_startup = 1


    " Bufferline bottom
        " Plugin 'bling/vim-bufferline'

         " scrolling with fixed current buffer position
         " let g:bufferline_rotate = 1

         " let g:bufferline_echo = 0


    " SystemVerilog highlight, like verilog
        " Plugin 'nachumk/systemverilog.vim'

    " Taglist
        " Plugin 'vim-scripts/taglist.vim'
        " let s:tlist_def_vhdl_settings = 'vhdl;h:using;e:entity;a:architecture;c:configuration;p:package;m:component;f:function;d:procedure;l:process;k:block;t:type;u:subtype;s:signal;v:variable;o:constant;b:attribute'

    " systemverilog
        " Plugin 'vhda/verilog_systemverilog.vim'

    " Vim VHDL
        " Plugin 'salinasv/vim-vhdl'

    " Select region
       " Plugin 'terryma/vim-expand-region'

    " ShowMarks
    "    Plugin 'vim-scripts/ShowMarks'

    " CommandT
        " Plugin 'wincent/command-t'
        " https://www.youtube.com/watch?v=knSFZCKMy20

    " LustyExplorer
        " Plugin 'sjbach/lusty'
        " https://www.youtube.com/watch?v=knSFZCKMy20



    " NeoComplete
        " Plugin 'Shougo/neocomplete.vim'
        " source ~/.vim/neocomplete.vim

    " SnipMate
        " Plugin 'honza/vim-snippets'

    " YouCompleteMe
        " Plugin 'Valloric/YouCompleteMe'


    " ack.vim
        " Plugin 'mileszs/ack.vim'
        " https://www.youtube.com/watch?v=knSFZCKMy20

    "NERDTRee
        " Plugin 'scrooloose/nerdTree'
        " http://vi.stackexchange.com/questions/3930/cannot-install-nerdtree-pluging-with-vundle
        " nmap <C-N> :NERDTreeToggle <Bar> wincmd =<CR>
        " autocmd VimEnter * NERDTree

    "Vimfiler
        " Plugin 'Shougo/vimfiler.vim'

    " Sessions
        " Plugin 'xolox/vim-session'

    " Session obsession
        " Plugin 'tpope/vim-obsession'
        " https://github.com/tpope/vim-obsession.git


    " FuzzyFinder
        "    Bundle "L9"
        "    Bundle "FuzzyFinder"

        " All of your Plugins must be added before the following line
        call vundle#end()            " required
        filetype plugin indent on    " required
        " To ignore plugin indent changes, instead use:
        filetype plugin on
        "
        " Brief help
        " :PluginList       - lists configured plugins
        " :PluginInstall    - installs plugins; append `!` to update or just :PluginUpdate
        " :PluginSearch foo - searches for foo; append `!` to refresh local cache
        " :PluginClean      - confirms removal of unused plugins; append `!` to auto-approve removal
        "
        " see :h vundle for more details or wiki for FAQ
        " Put your non-Plugin stuff after this line

" NK functions
    let g:nk_sessiondir  = g:nk_vim_dir."/sessions"

    " Session save options - Dont save key mappings and blank documents, save tabpages
    set sessionoptions-=blank sessionoptions+=tabpages sessionoptions-=folds sessionoptions-=options sessionoptions+=globals " sessionoptions+=winsize sessionoptions+=globals sessionoptions+=resize

    " Create session directory
    function! NK_CreateSessionDir()
        if !isdirectory(g:nk_sessiondir)
            call mkdir(g:nk_sessiondir, "p")
            echo "Session directory created: ".g:nk_sessiondir
        endif
    endfunc

    " Save bookmarks
    function NK_BookmarkSave()
        let server      = v:servername
        if has('nvim')
            " neovim at the moment doesn't support clientserver like vim
            let bookmarks   = g:nk_sessiondir."/"."nvim.bookmarks.vim"
        else
            let bookmarks   = g:nk_sessiondir."/".server.".bookmarks.vim"
        endif

        call NK_CreateSessionDir()
        execute "BookmarkSave ".bookmarks
        echo "Bookmarks saved to: ".bookmarks
    endfunction

    " Save session
    function! NK_SaveSession(nk_echo)
        let server      = v:servername
        if has('nvim')
            " neovim at the moment doesn't support clientserver like vim
            let session = g:nk_sessiondir."/"."nvim.session.vim"
        else
            let session = g:nk_sessiondir."/".server.".session.vim"
        endif

        call NK_CreateSessionDir()
        execute "mksession! ".session
        " Comment args for files opened from krusader
        " if has("unix")
            " execute "!sed -i 's/^args/\" args/g' " . session
        " endif
        " Delete arguments list if there are any, in order not to reopen them if closed
        if argc() != 0
            execute "argd *"
        endif
        if a:nk_echo
            echo "Session saved to: ".session
        endif
    endfunction

    " Save during quit
    function! NK_QuitSaveAll()
        call NK_BookmarkSave()
        call NK_SaveSession(1)
    endfunc


    " Map for session and bookmarks save
        nnoremap <leader>ns :call NK_QuitSaveAll()<CR>

    " Load

    " Load session
    function! NK_LoadSession()
        let server  = v:servername
        let session = g:nk_sessiondir."/".server.".session.vim"

        if !empty(server)
            if filereadable(session)
                execute "source ".session
                echo 'Session opened: '.session
            endif
        endif

        " Filter specific files, useful for org mode
        if  server == "TODO"
            let g:vimfiler_ignore_pattern = ['^\.', '\.html$', '\.pdf', '\.tex', 'styles']
        endif

    endfunction
        " http://www.ibm.com/developerworks/library/l-vim-script-1/

    " Load bookmarks
    function! NK_BookmarkLoad()
        let server      = v:servername
        let bookmarks   = g:nk_sessiondir."/".server.".bookmarks.vim"

        if filereadable(bookmarks)
            execute "BookmarkLoad ".bookmarks
            echo 'Bookmarks loaded from: '.bookmarks
        endif
    endfunction

    function! NK_DeleteVimfilerBuffers()
        " if (bufexists("*@"))
            execute "silent! bd *@b"
            execute "silent! bd *@c"
        " endif
    endfunc

    " Load during enter
    let g:nk_vim_loaded = 0
    function! NK_EnterLoadAll()
        call NK_LoadSession()
        " call NK_BookmarkLoad()
        call NK_SetUndoDir()
        " call NK_SetBackupSwapDirs()
        call NK_DeleteVimfilerBuffers()
        let g:nk_vim_loaded = 1
    endfunc

    let g:nk_new_buff = 0
    function NK_AutoSaveSession()
        if g:nk_vim_loaded
            let g:nk_new_buff = 1
            call NK_SaveSession(0)
        endif
    endfunc

    "  function! NK_EnterSessionLoad()

    "      " get the server (session) name
    "      let server = v:servername

    "      let bookmarks = g:session_dir."/".server.".bookmarks.vim"
    "      " echo bookmarks
    "      " load boookmarks using the server name
    "      if filereadable(file)
    "          execute "source ".file
    "          echo 'Session opened!'
    "      endif

    "      if filereadable(file)
    "          execute "BookmarkLoad ".bookmarks
    "          echo 'Bookmarks loaded from: '.bookmarks
    "      endif

    "  endfunc

    autocmd VimLeave * call NK_QuitSaveAll()
    autocmd BufAdd * call NK_AutoSaveSession()
    " autocmd BufReadPost * call NK_AutoSaveSession()
    autocmd VimEnter * nested call NK_EnterLoadAll()

" Copy from command mode
    " Press "q:" in normal mode

" Regex(regex) examples, regular expressions
    " \v - Turn on magic, dont have to escape special characters for regex * ( [

    " Find lines that dont! contain string (7z), negative match
        " \v^((.*7z.*)@!.)*$

    " Find specific word, not preceded or followed by letters
        " \v<primer>

    " Negative lookbehind
        " Match strings "primer" not preceded by "abe"
            " \(abe\)\@<!primer
                " or with magic
            " \v(a)@<!be
        " Match strings "ss" not preceded by letters (alpha - [a-z])
            " \([a-z]\)\@<!ss
                " or just use '*' to find "ss" :)
    " https://www.inputoutput.io/lookbehind-lookahead-regex-in-vim/

" For netrw
    " filetype plugin on

" Reload vim by using
    " :source ~/.vimrc

" YouCompleteMe - YCM
    " let g:ycm_global_ycm_extra_conf = '~/.ycm_extra_conf.py'

" Map Enter in normal mode to new line
    " nnoremap <S-CR> o<Esc>

" Delete to the begining of line and go up to the end of previous line
    " d0 - delete to the begining of line
    " x  - delete current char
    " k  - go up
    " $  - go to the end of line
    " nnoremap <S-BS> :s/^$//<CR> <Bar> d0xk$
    " nnoremap <S-BS> :s/^$//<CR>

" Clean trailing whitespaces
    " nnoremap <leader>k :%s/\s\+$//<CR>
    nnoremap <leader>k :call NK_CleanTrailingChars()<CR>

    function! NK_CleanTrailingChars()
        let ln_number = line(".")
        execute '%s/\s\+$//'
        execute 'normal '.ln_number.'G'
    endfunc


" Show if file is modified
    set statusline+=%F
    set laststatus=2

" Open new window split on right side, down side
    set splitright
    set splitbelow
        " /ref/ http://stackoverflow.com/a/7207769/2450748

" Tab width
    " Exception for Makefiles - Already done in Vim implementation
    " autocmd FileType make set tabstop=4 shiftwidth=4 softtabstop=0 noexpandtab nosmarttab
    " autocmd FileType make setlocal noexpandtab

    " filetype plugin indent on
    set expandtab       " Expand TABs to spaces
    set tabstop=4       " The width of a TAB is set to 4.
    set softtabstop=4       " The width of a TAB is set to 4.
    set shiftwidth=4
    set smarttab
                        " Still it is a \t. It is just that
                        " Vim will interpret it to be having
                        " a width of 4.

    " /ref/ http://stackoverflow.com/a/1878984/2450748
    " /ref/ http://stackoverflow.com/a/21323445/2450748

" Colorscheme
    syntax enable
    set background=dark
    " colorscheme solarized
    " colorscheme darkblue
    " colorscheme darkspectrum
    " colorscheme aldmeris

    colorscheme desert

    " Set darker background color for windows
    " if has("win32") || has("win16")
    " if has("gui_running")
        " highlight Normal guibg=#191919
    " else
        highlight Normal guibg=#000000
    " endif
        " highlight Normal guibg=#000000
        " highlight Normal ctermbg=1
        " highlight Normal termbg=1
        " highlight Normal guibg=#000000
    " endif



    "Use same color for background and in empty part
    hi NonText guibg=bg
    hi NonText guifg=bg
    " /ref/ http://stackoverflow.com/a/9406825/2450748

    " /ref/ https://github.com/altercation/Vim-colors-solarized
    "       http://ethanschoonover.com/solarized
    "       http://www.vim.org/scripts/script.php?script_id=3673

    hi CursorLine guibg=#424949

" Whitespace characters
    set list
    set listchars=tab:>-,trail:~,extends:>,precedes:<
    " /ref/ http://stackoverflow.com/a/1675752/2450748

    function! NK_ToggleWhitespaces()
        if(&list == 1)
            set nolist
        else
            set list
        endif
    endfunc

    nnoremap <leader>zw :call NK_ToggleWhitespaces()<CR>

" Incremental search
    set incsearch
    set hlsearch

" Separate directory for .swp files
" No bkp and swp dirs
    set noswapfile
    set nobackup
    " /ref/ http://stackoverflow.com/a/821936/2450748
    let g:nk_swp_dir     = g:nk_vim_dir."/swp"
    let g:nk_bkp_dir     = g:nk_vim_dir."/bkp"
    " // - The // at the end of the directory name tells Vim to use the absolute path to the file
    "      to create the swap file so there aren't collisions between files of the same name from different directories.
    "      /ref/ http://vi.stackexchange.com/a/179

    function! NK_CreateSwapDir()
        let swp_dir = g:nk_swp_dir

        if !isdirectory(swp_dir)
            call mkdir(swp_dir, "p")
        endif
    endfunc

    function! NK_CreateBackupDir()
        let bkp_dir = g:nk_bkp_dir

        if !isdirectory(bkp_dir)
            call mkdir(bkp_dir, "p")
        endif
    endfunc

    function! NK_SetBackupSwapDirs()
        " let bkp_dir = g:nk_bkp_dir."//"
        " let swp_dir = g:nk_swp_dir."//"

        call NK_CreateBackupDir()
        call NK_CreateSwapDir()
        let &backupdir = bkp_dir
        let &directory = swp_dir
    endfunc

    " let &backupdir = g:nk_bkp_dir;
    " let &directory = g:nk_swp_dir;
    " set directory=~/.vim/swp//

" Use Ctrl+[ instead of Esc
    " /ref/ http://stackoverflow.com/a/397279/2450748

" Autocomplete
    " /ref/ http://vim.wikia.com/wiki/Autocomplete_with_TAB_when_typing_words
    " function! Tab_Or_Complete()
    "   if col('.')>1 && strpart( getline('.'), col('.')-2, 3 ) =~ '^\w'
    "     return "\<C-N>"
    "   else
    "     return "\<Tab>"
    "   endif
    " endfunction
    " inoremap <Tab> <C-R>=Tab_Or_Complete()<CR>

" Save sessions
    " let g:sessiondir = g:nk_vim_dir . "/sessions" . getcwd()
    let g:sessiondir = g:nk_vim_dir . "/sessions"
    let g:sessionfile = g:sessiondir . "/session.vim"


    " Session save options - Dont save key mappings and blank documents, save tabpages
        set sessionoptions-=blank sessionoptions-=options sessionoptions+=tabpages " sessionoptions+=winsize sessionoptions+=globals sessionoptions+=resize
        " /ref/ https://github.com/tpope/vim-obsession
        " /ref/ https://github.com/tpope/vim-obsession/blob/master/plugin/obsession.vim

    " where do you want to save sessions?


        let g:session_dir = g:nk_vim_dir."/sessions"

    " Save sessions whenever vim closes
        " autocmd VimLeave * call SaveSession()
        " Always close vim with ":qa" dont use "Alt+F4" !!!

    " Saves the session to session dir. Creates session dir if it doesn't
    " yet exist. Sessions are named after servername paameter
        " function! SaveSession()
            " " get the server (session) name
            " let s = v:servername

            " " create session dir if needed
            " if !isdirectory(g:session_dir)
                " call mkdir(g:session_dir, "p")
            " endif

            " " let session_nk = ".g:session_dir."/".s.".session.vim"

            " " save session using the server name
            " execute "mksession! ".g:session_dir."/".s.".session.vim"

            " echo 'Session saved!'
        " endfunc

        " function! OpenSession()
            " " check if file names were passed as arguments
            " " echo 'abcd'
            " " if argc() == 0
                " " echo 'kude'
                " let sn = v:servername
                " let file = g:session_dir."/".sn.".session.vim"

                " " if session file exists, load it
                " if filereadable(file)
                    " execute "source ".file
                    " echo 'Session opened!'
                " endif
        " endfunc

    " Fast save and open session
        " nnoremap <leader>n :call SaveSession()<CR>
        " nnoremap <leader>. :call OpenSession()<CR>


"It is better to use buffers and ls than to use Tabs !!!

" Make windows equal
    autocmd VimResized * wincmd =

" Load session when vim is opened, comment if some Plugin wont work
    " autocmd VimEnter * nested call OpenSession()
    " autocmd VimEnter * call NK_EnterBookmarkLoad()


" Go through windows faster - using Ctrl key -
    " /ref/ http://vim.wikia.com/wiki/Switch_between_Vim_window_splits_easily
    " nmap <silent> <C-k> :wincmd k<CR>
    " nmap <silent> <C-j> :wincmd j<CR>
    " nmap <silent> <C-h> :wincmd h<CR>
    " nmap <silent> <C-l> :wincmd l<CR>

" Relative line numbers
    " /ref/ http://jeffkreeftmeijer.com/2013/vims-new-hybrid-line-number-mode/
    " /ref/ https://github.com/jeffkreeftmeijer/vim-numbertoggle/blob/master/plugin/number_toggle.vim#L4

    function! NumberToggle()
        if v:version < 704
            if(&relativenumber == 1)
                set number
            else
                set relativenumber
            endif
        else
            if(&relativenumber == 1)
                set norelativenumber
            else
                set relativenumber
            endif
        endif
    endfunc

    if v:version < 704
        set relativenumber
        autocmd InsertEnter * :set number
        autocmd InsertLeave * :set relativenumber
    else
        set relativenumber
        set number
    endif

    nnoremap <C-n> :call NumberToggle()<CR>

    " /ref/ http://jeffkreeftmeijer.com/2012/relative-line-numbers-in-vim-for-super-fast-movement/
            "
        " :au FocusLost * :set number
        " :au FocusGained * :set relativenumber


" Use Tab in normal mode to indent lines
    " Delete white spaces until first word and tabulate
    " nnoremap <Tab> v><Esc>
    " nnoremap <S-Tab> 0dwi<Tab><Esc>
    " inoremap <S-Tab> 0^hd>

    " /ref/ http://stackoverflow.com/a/6975491/2450748
    " vnoremap <Tab> >

" Smart-case search - case sensitive only when cappital letters are used
    " Affects substitute command - :s, so it is no good
    " when you want case insensitive search use:
    "   /\ctext
    "
    " set ignorecase
    " set smartcase
    " :%s/lowercasesearch/replaceString/gI
    "   /ref/http://stackoverflow.com/questions/2287440/how-to-do-case-insensitive-search-in-vim

" Highlight current line
    if &diff
        set scrolloff=999
    else
        set cursorline
    endif
        " /ref/ http://vim.wikia.com/wiki/Highlight_current_line

" Escape insert mode
    " inoremap <C-q> <Esc>
    " vnoremap <C-q> <Esc>

" Move lines

" Disable automatic comment insertion
    autocmd FileType * setlocal formatoptions-=c formatoptions-=r formatoptions-=o

" Save files using <C-s>
    noremap <C-s> :w<CR>

" Show keystrokes
    set showcmd

" Go to next/previous buffer
    noremap <C-j> :bn!<CR>
    nnoremap <C-k> :bp!<CR>

    noremap <C-Down> :bn!<CR>
    noremap <C-Up>   :bp!<CR>

    " Use "gt", "gT" and "<leader>zt" for tab navigation, <C-PageUp/Down> might be used by terminal
    " noremap <C-PageDown> :tabn<CR>
    " noremap <C-PageUp> :tabp<CR>

" Delete empty lines
    function! DeleteEmptyLine()
        let line=getline('.')
        " echo line
        let length = strlen(line)
        if length == 0
            " Delete this line into black hole register
            :normal "_dd
                " /ref/ http://stackoverflow.com/questions/3638542/any-way-to-delete-in-vim-without-overwriting-your-last-yank
            " :d
            " echo "delete this one"
        endif
    endfunction

" Delete to the begining of line and go up to the end of previous line
    nnoremap <S-BS> :call DeleteEmptyLine() \| :normal k<CR>

" Deleted local file notify
      " au FileChangedShell * call FCSHandler(expand("<afile>:p"))

      "  function FCSHandler(name)
      "    let msg = 'File "'.a:name.'"'
      "    let v:fcs_choice = ''
      "    if v:fcs_reason == "deleted"
      "      let msg .= " no longer available - 'modified' set"
      "      call setbufvar(expand(a:name), '&modified', '1')
      "      echohl WarningMsg
      "    elseif v:fcs_reason == "time"
      "      let msg .= " timestamp changed"
      "    elseif v:fcs_reason == "mode"
      "      let msg .= " permissions changed"
      "    elseif v:fcs_reason == "changed"
      "      let msg .= " contents changed"
      "      let v:fcs_choice = "ask"
      "    elseif v:fcs_reason == "conflict"
      "      let msg .= " CONFLICT --"
      "      let msg .= " is modified, but"
      "      let msg .= " was changed outside Vim"
      "      let v:fcs_choice = "ask"
      "      echohl ErrorMsg
      "    else  " unknown values (future Vim versions?)
      "      let msg .= " FileChangedShell reason="
      "      let msg .= v:fcs_reason
      "      let v:fcs_choice = "ask"
      "      echohl ErrorMsg
      "    endif
      "    redraw!
      "    echomsg msg
      "    echohl None
      "  endfunction

" Map to reload
    " Dont use function keys for shortcuts as they may be used by terminal, tmux, ...
    nnoremap <leader>zr :e!<CR>

" Map F2 to new file
    " Dont use function keys for shortcuts as they may be used by terminal, tmux, ...
    noremap <leader>zn :enew!<CR>

" Map Shift + Arrow keys in insert mode to select
    inoremap <S-Right> <Esc>vl
    nnoremap <S-Right> <Esc>vl
    " inoremap <S-l> <Esc>v$
    " nnoremap <S-l> <Esc>vl
    inoremap <S-Left>  <Esc>vh
    nnoremap <S-Left>  <Esc>vh
    " inoremap <S-h>  <Esc>v^
    " nnoremap <S-h>  <Esc>vh

    nnoremap <S-Home> <Esc>v^
    inoremap <S-Home> <Esc>v^
    nnoremap <S-End> <Esc>v$
    inoremap <S-End> <Esc>v$

" Fold code by indent
    set foldmethod=indent
    " Dont fold text by default
    autocmd BufWinEnter * silent! :%foldopen!
        " /ref/ http://stackoverflow.com/a/23672376/2450748
    " set nofoldenable
    " Shortcuts
        " zo - Expand selected section
        " zc - Fold selected section
        " zR - Open all sections
        " zM - Fold all sections

" Tags
    " Search them from "CtrlP" plugin
    " Supported languages
        " /ref/ http://ctags.sourceforge.net/languages.html
    " /ref/ http://usevim.com/2013/01/18/tags/
    " 1. Install ctags from Software Center
    "    Generate tags using:
    "        > ctags -R
    " 2. Set vim tags directory, searches from current one and back to the one stated after ";"
    set tags+=tags;~
        " /ref/ http://stackoverflow.com/questions/5017500/vim-difficulty-setting-up-ctags-source-in-subdirectories-dont-see-tags-file-i#comment19200059_5019111

    " Shortcuts
        " <C-]> - Go to tag
        " <C-t> - Go back to original position

    " Search tag pattern - /
        " :tag /main

" Change working directory to current file directory
    " nnoremap <leader>cd :cd %:p:h<CR>
    " Not so useful for now so commenting
    "autocmd BufEnter * silent! lcd %:p:h
    " set autochdir " had problems with this one!!!
        " /ref/ http://vim.wikia.com/wiki/Set_working_directory_to_the_current_file

" Netrw additional functions - replacement for NERDTree
    " /ref/ http://codoki.com/2015/01/07/dont-use-nerdtree/
    " /ref/ http://ivanbrennan.nyc/blog/2014/01/16/rigging-vims-netrw/
    " /ref/ http://ivanbrennan.nyc/blog/2014/01/16/rigging-vims-netrw/
    "" Toggle Vexplore with Ctrl-E
    function! ToggleVExplorer(dir)
        if exists("t:expl_buf_num")
            let expl_win_num = bufwinnr(t:expl_buf_num)
            if expl_win_num != -1
                let cur_win_nr = winnr()
                exec expl_win_num . 'wincmd w'
                close
                exec cur_win_nr . 'wincmd w'
                unlet t:expl_buf_num
            else
                unlet t:expl_buf_num
            endif
        else
            exec '1wincmd w'
            execute "Vexplore ".a:dir
            let t:expl_buf_num = bufnr("%")
        endif
        exec 'wincmd ='
    endfunction

    " map <silent> <C-e> :call ToggleVExplorer("")<CR>
    " map <silent> <leader>e :call ToggleVExplorer(getcwd())<CR>
    " nnoremap <C-e>     :Vexplore!<CR> :wincmd=<CR>
    " nnoremap <leader>e :execute "Vexplore! ".getcwd()<CR> :wincmd=<CR>

    " let g:netrw_silent        = 1

    " let g:netrw_liststyle = 0           " thin (change to 3 for tree)
    let g:netrw_liststyle   = 3
    let g:netrw_banner      = 0           " no banner
    " let g:netrw_altv      = 1           " open files on right
    " let g:netrw_preview   = 1           " open previews verticall

    "" Hit enter in the file browser to open the selected
    "" file with :vsplit to the right of the browser.
    let g:netrw_browse_split = 4
    let g:netrw_altv = 1
    let g:netrw_winsize = 20

    " let g:netrw_altv          = 1
    " let g:netrw_fastbrowse    = 2
    " let g:netrw_keepdir       = 0
    " let g:netrw_liststyle     = 2
    " let g:netrw_retmap        = 1
    " let g:netrw_silent        = 1
    " let g:netrw_special_syntax= 1

    "" Default to tree mode
    " fun! VexToggle(dir)
      " if exists("t:vex_buf_nr")
        " call VexClose()
      " else
        " call VexOpen(a:dir)
      " endif
    " endf

    " fun! VexOpen(dir)
      " let g:netrw_browse_split=4    " open files in previous window
      " let vex_width = 25

      " execute "Vexplore " . a:dir
      " let t:vex_buf_nr = bufnr("%")
      " wincmd H

      " call VexSize(vex_width)
    " endf

    " fun! VexClose()
      " let cur_win_nr = winnr()
      " let target_nr = ( cur_win_nr == 1 ? winnr("#") : cur_win_nr )

      " 1wincmd w
      " close
      " unlet t:vex_buf_nr

      " execute (target_nr - 1) . "wincmd w"
      " call NormalizeWidths()
    " endf

    " fun! VexSize(vex_width)
      " execute "vertical resize" . a:vex_width
      " set winfixwidth
      " call NormalizeWidths()
    " endf

    " fun! NormalizeWidths()
      " let eadir_pref = &eadirection
      " set eadirection=hor
      " set equalalways! equalalways!
      " let &eadirection = eadir_pref
    " endf

    " augroup NetrwGroup
      " autocmd! BufEnter * call NormalizeWidths()
    " augroup END


" Copy/Paste
        " http://codeyarns.com/2013/07/26/how-to-check-for-cygwin-in-vim/
    if has("win32") || has("win16") || has("win32unix")
        set clipboard=unnamed
    else
        set clipboard=unnamedplus
    endif
    " /ref/ http://vim.wikia.com/wiki/Accessing_the_system_clipboard
    " Use put to paste context from register
        " :put +
    " /ref/ http://vimcasts.org/episodes/comparing-buffers-with-vimdiff/

    " nnoremap <leader>yy "+y
    " vnoremap <leader>yy "+y

    " nnoremap <leader>pp "+y
    " nnoremap <leader>c "+yy
    " vnoremap  <leader>v "+gP
    " nnoremap  <leader>v "+gP
    " inoremap  <C-a> <Esc>"+gPi

" Jump through windows fast
    nnoremap <leader>1 :1wincmd w<CR>
    nnoremap <leader>2 :2wincmd w<CR>
    nnoremap <leader>3 :3wincmd w<CR>
    nnoremap <leader>4 :4wincmd w<CR>
    nnoremap <leader>5 :5wincmd w<CR>

    nnoremap <leader><k1> :1wincmd w<CR>
    nnoremap <leader><k2> :2wincmd w<CR>
    nnoremap <leader><k3> :3wincmd w<CR>
    nnoremap <leader><k4> :4wincmd w<CR>
    nnoremap <leader><k5> :5wincmd w<CR>

    " C-W L -> move window to far right
    " C-W H -> move window to far left
    " C-W J -> move window to very bottom
    " C-W K -> move window to very top
        " http://stackoverflow.com/questions/4556184/vim-move-window-left-right

" Shortcut for replace in current file, buffers, ...
    " /ref/ http        : //www.thegeekstuff.com/2009/04/vi-vim-editor-search-and-replace-examples/
    nnoremap <leader>ss : %s,,,gc<Left><Left><Left><Left>
    nnoremap <leader>sb : bufdo! %s,,,gc<Left><Left><Left><Left>
    nnoremap <leader>sww : %s,<C-R><C-W>,<C-R><C-W>,g<Left><Left>
    nnoremap <leader>swa : windo! %s,<C-R><C-W>,<C-R><C-W>,gc<Left><Left><Left>
    nnoremap <leader>swb : bufdo! %s,<C-R><C-W>,<C-R><C-W>,gc<Left><Left>
    " Substitute word under cursor in whole file <leader>sw, go back with <C-o>
    vnoremap <leader>ss  : s,\%V,,g<Left><Left><Left>
    " increment decimal visual block
    vnoremap <leader>sn  : s,\%V\(\d\+\),\=submatch(1)+1,g<Left><Left>
    " increment hexadecimal visual block
    " vnoremap <leader>sh  : s/\%V\(0[xX]\)[0-9a-fA-F]\+/\=printf("%s%X", submatch(1) ,submatch(0)+1)/g<Left><Left><Left>
    vnoremap <leader>sh  :call NK_IncrementHex("X",2,1)
        " To print without leading zeros use:
            " call NK_IncrementHex("X","",1)
        " :call NK_IncrementHex("X","",1)
        " :call NK_IncrementHex("x",4,1)

    function! NK_IncrementHex(small_big, format, increment)
        " :call NK_IncrementHex("X",4,1) " big letters, 4 digits, num+1
        " supports "0xAB" and "7'hAB" (verilog)
        s/\%V\(0[xX]\|'h\)\([0-9a-fA-F]\+\)/\=printf("%s%0".a:format.a:small_big, submatch(1) ,"0x".submatch(2)+a:increment)
    endfunc
        " http://vim.wikia.com/wiki/Convert_between_hex_and_decimal
        " http://stackoverflow.com/a/1118642/2450748
        " http://stackoverflow.com/a/9221391/2450748
        " http://unix.stackexchange.com/a/72062/156466
    " sw Only works for one line, not for V
    vnoremap <leader>sw  : s,\%V<C-R><C-W>,<C-R><C-W>,g<Left><Left>
    " Substitute Windows EOL (^M) with Unix EOL, or just hide "^M"
    noremap <leader>se :%s,\r,\r,g<CR>
    noremap <leader>he :e ++ff=dos<CR>
    noremap <leader>HE :e ++ff=unix<CR>
    " Substitute paths, use ',' instead of '/' as separator
        " http://stackoverflow.com/a/1684645/2450748
        " http://stackoverflow.com/questions/811193/how-to-convert-the-m-linebreak-to-normal-linebreak-in-a-file-opened-in-vim
        " http://stackoverflow.com/questions/799417/gvim-showing-carriage-return-m-even-when-file-mode-is-explicitly-dos
        " http://vim.wikia.com/wiki/File_format

" Quickfix window Open, Next, Previous
    " Use with repeat command (@:) - write :cn, cp<CR>, and then <C-n>
    " nnoremap <C-m>     :cn<CR> " <C-M> is ENTER!!!
    nnoremap <leader>. :cn<CR>
    nnoremap <leader>, :cp<CR>

" Repeat last command from command line
    nnoremap <C-@> @:

" Search buffers directories
    " Search remap for case insensitive search
    nnoremap / /\c
    " nnoremap <leader>// /\c
    nnoremap <leader>/c :nohlsearch<CR>
    " /ref/ https://medium.com/hacking-and-gonzo/10-vim-tricks-you-should-know-6393842b3537#.3pxco1r77
    "       http://dougblack.io/words/a-good-vimrc.html
    " /ref/ http://stackoverflow.com/a/2287449/2450748
    " nnoremap <leader>// :bufdo! /\c
    nnoremap <leader>/d :Grep  -i *<Left><Left>
    " nnoremap /w :call NK_SearchWord()
    " nnoremap /w "zyiw:execute "Grep ".@z." *"
    "# Search word under cursor in current directory
    nnoremap <leader>/g :Grep -i <C-R><C-W> *
    nnoremap <leader>/. :Grep -i  %:p --no-filename<Left><Left><Left><Left><Left><Left><Left><Left><Left><Left><Left><Left><Left><Left><Left><Left><Left><Left>
    " nnoremap <leader>/w :Grep -i <C-R><C-W> %:p --no-filename<Left><Left><Left><Left><Left><Left><Left><Left><Left><Left><Left><Left><Left><Left><Left><Left><Left><Left><Left>
    nnoremap <leader>// :GrepBuffer -i<Space>
        " /ref/ http://vim.wikia.com/wiki/Word_under_cursor_for_command

    function! NK_SearchWord()
      let w = expand("<cword>") " get the word under cursor
      execute  ":Grep ".w." *"
    endfunc


" Dont lose undo when changing buffers and save undo history
    " /ref/ http://stackoverflow.com/questions/2732267/vim-loses-undo-history-when-changing-buffers

    if has("unix")
        let g:nk_vim_undo_dir = $HOME."/.nk/vim/undo"
    else
        let g:nk_vim_undo_dir = $HOME."/_nk/vim/undo"
    endif
    " let g:nk_default_undo_dir = g:nk_vim_dir."/undo"

    function! NK_SetUndoDir()
        " /ref/ http://stackoverflow.com/a/22676189/2450748
        let default_dir = g:nk_vim_undo_dir

            if !isdirectory(default_dir)
                call mkdir(default_dir, "p")
            endif
            " execute "set undodir = ".default_dir
            let &undodir = default_dir
    endfunc

    " Persistent undo
    " % sign bothers me
    " set hidden
    set undofile
    set undolevels=1000
    set undoreload=10000

" Undo/redo all buffer changes
    " nnoremap <leader>uu :earlier<CR>
    nnoremap <leader>uu :undo<CR>
    " nnoremap <leader>ub :bufdo! e!<CR>
    nnoremap <leader>ub :bufdo! undo<CR>
    nnoremap <leader>uw :windo! undo<CR>

    nnoremap <leader>UR :redo<CR>
    nnoremap <leader>UB :bufdo! redo<CR>
    nnoremap <leader>UW :windo! redo<CR>

" Autocomplete background color
    highlight Pmenu    guibg=darkcyan guifg=white gui=bold
    highlight PmenuSel guibg=brown guifg=white gui=bold

    highlight Pmenu    ctermbg=darkcyan ctermfg=white gui=bold
    highlight PmenuSel ctermbg=brown ctermfg=white gui=bold

" Increase commands history from 20 to 10000
    " /ref/ http://stackoverflow.com/questions/8930690/what-sets-vim-history
    set history=10000

" Turn on omni autocomplete
    " filetype plugin on
    " set omnifunc=syntaxcomplete#Complete

" Delete buffer, close window shortcut
    " nnoremap <leader>w :bd<CR>
    " Remove current buffer without removing window
    nnoremap <leader>q :bn\|bd #<CR>
    nnoremap <leader>w :wincmd c<CR>
    " /ref/ http://stackoverflow.com/questions/4465095/vim-delete-buffer-without-losing-the-split-window

" Go to previous window
    " nnoremap <leader>p :wincmd p<CR>

" Quickfix window toggle
    " /ref/ http://vim.wikia.com/wiki/Toggle_to_open_or_close_the_quickfix_window
    function! GetBufferList()
      redir =>buflist
      silent! ls!
      redir END
      return buflist
    endfunction

    function! ToggleList(bufname, pfx)
      let buflist = GetBufferList()
      for bufnum in map(filter(split(buflist, '\n'), 'v:val =~ "'.a:bufname.'"'), 'str2nr(matchstr(v:val, "\\d\\+"))')
        if bufwinnr(bufnum) != -1
          exec(a:pfx.'close')
          return
        endif
      endfor
      if a:pfx == 'l' && len(getloclist(0)) == 0
          echohl ErrorMsg
          echo "Location List is Empty."
          return
      endif
      let winnr = winnr()
      exec(a:pfx.'open')
      if winnr() != winnr
        wincmd p
      endif
    endfunction

    " nmap <silent> <leader>q :call ToggleList("Location List", 'l')<CR>
    " nmap <silent> <leader>q :call ToggleList("Quickfix List", 'c')<CR>
    nnoremap <silent> <leader>zq :call ToggleList("Quickfix List", 'c')<CR>

" Real delete - black hole register
    " /ref/ http://stackoverflow.com/a/11993928
    nnoremap <leader>d "_d
    vnoremap <leader>d "_d

" Fix backspace on windows
    if has("win32") || has("win16")
        set backspace=2
        set backspace=indent,eol,start
    endif

" Set font in windows
    if has("win32") || has("win16")
        set guifont=consolas:h11
    else
        set guifont=Monospace\ 11
    endif

" Allow to open other files with unite when previous changes are not saved
    set hidden
    " /ref/ http://usevim.com/2012/10/19/vim101-set-hidden/

" Change directory to the directory of the currently open file
    nnoremap <leader>cd :cd %:p:h<CR>:pwd<CR>
    " /ref/ http://vim.wikia.com/wiki/Set_working_directory_to_the_current_file

" Copy file name/path to clipboard
    " Echo full path to command line
      nnoremap <leader>xx :echo expand("%:p")<CR>

    " Convert slashes to backslashes for Windows.
    if has("win32") || has("win16")
      nnoremap <leader>xn :let @+=substitute(expand("%:t"), "/", "\\", "g") <CR>  <bar> :echo expand("%:t")<CR>
      nnoremap <leader>xp :let @+=substitute(expand("%:p:h"), "/", "\\", "g")<CR> <bar> :echo expand("%:p:h")<CR>
      nnoremap <leader>xf :let @+=substitute(expand("%:p"), "/", "\\", "g")<CR>   <bar> :echo expand("%:p")<CR>

      " This will copy the path in 8.3 short format, for DOS and Windows 9x
      " nmap ,c8 :let @*=substitute(expand("%:p:8"), "/", "\\", "g")<CR>
    else
      " nmap ,cs :let @*=expand("%")<CR>
      " nmap ,cl :let @*=expand("%:p")<CR>
      nnoremap <leader>xn :let @+=expand("%:t")<CR>   <bar> :echo expand("%:t")<CR>
      nnoremap <leader>xp :let @+=expand("%:p:h")<CR> <bar> :echo expand("%:p:h")<CR>
      nnoremap <leader>xf :let @+=expand("%:p")<CR>   <bar> :echo expand("%:p")<CR>
    endif

" Tags in seperate window
    " nnoremap <C-]> <Esc>:exe "ptjump " . expand("<cword>")<Esc>
    " nnoremap <F8> :let mycurf=expand("<cfile>")<CR> :echo "a"<CR> <C-w> w :execute("e ".mycurf)<CR><C-w>p

    " preview window... to get it to open vert right, or horiz as desired
    function PreviewTag(top)
      "by MW
      set previewheight=25
      exe "silent! pclose"
      if &previewwindow " don't do this in the preview window
        return
      endif
      let w = expand("<cword>") " get the word under cursor
      exe "ptjump " . w
      " if any non False arg, open in simple horiz window so simply return
      if a:top
        return
      endif
      " otherwise, make it vertical
      exe "silent! wincmd P"
      if &previewwindow " if we really get there...
        if has("folding")
          silent! .foldopen " don't want a closed fold
        endif
        wincmd L " move preview window to the far right
        " Horizontal to vertical split - http://stackoverflow.com/a/1269631/2450748
        wincmd p " back to caller
        " wincmd H
        if !&previewwindow " got back
          wincmd _
          " make caller full size (I use minibufexplorer and for some reason
          " the window is altered by the preview window split and manipulation
          " so wincmd _ sets it back... your mileage may vary
        endif
      endif
    endfunction

    " /ref/ http://vim.wikia.com/wiki/Optionally_open_matching_or_selected_tag_in_full_height_vertical_window

    " right hand window full height preview window
    nnoremap <leader>]] :call PreviewTag(0)<CR>
    " inoremap <leader>] <Esc>:call PreviewTag(0)<CR>
    " simple "above the caller" preview window,
    nnoremap <leader>][ :call PreviewTag(1)<CR>
    " inoremap <leader>[ <Esc>:call PreviewTag(1)<CR>
    " close preview
    noremap <leader>]p <Esc>:pc<CR>

" Jump to occurences
    " /ref/ http://vim.wikia.com/wiki/List_lines_with_keyword_and_prompt_for_jump#References
    " List occurrences of keyword under cursor, and
    " jump to selected occurrence.
    function! s:JumpOccurrence()
      let v:errmsg = ""
      exe "normal [I"
      if strlen(v:errmsg) == 0
        let nr = input("Which one: ")
        if nr =~ '\d\+'
          exe "normal! " . nr . "[\t"
        endif
      endif
    endfunction

    " List occurrences of keyword entered at prompt, and
    " jump to selected occurrence.
    function! s:JumpPrompt()
      let keyword = input("Keyword to find: ")
      if strlen(keyword) > 0
        let v:errmsg = ""
        exe "ilist! " . keyword
        if strlen(v:errmsg) == 0
          let nr = input("Which one: ")
          if nr =~ '\d\+'
            exe "ijump! " . nr . keyword
          endif
        endif
      endif
    endfunction

    " Use "[i" to view first occurence of variable
    nnoremap <leader>[[ [I
    nnoremap <leader>[] :call <SID>JumpOccurrence()<CR>
    " JumpPrompt - Regex matching
    nnoremap <leader>[p :call <SID>JumpPrompt()<CR>

" SystemVerilog highlight as verilog
    autocmd BufNewFile,BufRead *.sv,*.vh,*.svh   set ft=verilog
    " /ref/ http://stackoverflow.com/a/11666247/2450748

" Reload file when it changes from externall application
    set autoread

" Convert file endings (end of line - EOL) to dos or unix
    " :set ff = dos
    " :set ff = unix
    " /ref/ http://vim.wikia.com/wiki/File_format

" Repeat last commands
    " Repeat last text change command - Type "."
    " Repeat last move command        - Type ";"
    " /ref/ http://superuser.com/a/827326/292101

" Turn spelling correction on/off
    " :set spell
    " :set nospell
    " Turn off spell capital leters check
        " :set spellcapcheck=
    " Show spelling suggestions
        " z=
        " Use first suggestion
        " 1z=

" Switch between header and cpp
    autocmd FileType cpp map <leader>zH :vsp %:p:s,.h$,.X123X,:s,.cpp$,.h,:s,.X123X$,.cpp,<CR>
    autocmd FileType cpp map <leader>zh :e %:p:s,.h$,.X123X,:s,.cpp$,.h,:s,.X123X$,.cpp,<CR>

    autocmd FileType c map <leader>zH :vsp %:p:s,.h$,.X123X,:s,.c$,.h,:s,.X123X$,.c,<CR>
    autocmd FileType c map <leader>zh :e %:p:s,.h$,.X123X,:s,.c$,.h,:s,.X123X$,.c,<CR>
        " .h is in vim by default cpp file type so switch from .h to .c wont work, only to .cpp
    " /ref/ http://vim.wikia.com/wiki/Easily_switch_between_source_and_header_file

" Vim navigation
    " /ref/ http://www.thegeekstuff.com/2009/03/8-essential-vim-editor-navigation-fundamentals/

" netrw - Trash instead of rm
    " let g:netrw_localrmdir='Recycle'

" Dont type in word, just show menu and then confirm with "Enter"
    set completeopt=longest,menuone
        " /ref/ http://vim.wikia.com/wiki/Make_Vim_completion_popup_menu_work_just_like_in_an_IDE

" Focus file when launched with vim terminal if file is specified
    " autocmd VimEnter * echo "abe"
    " ~/.gitconfig
    " cmd = vim -f '+next' '+execute \"DirDiff\" argv(0) argv(1)' $LOCAL $REMOTE --cmd \"let g:nk_diff=1\"
    " --cmd - {command} will be executed before processing any vimrc file.
        " http://vimdoc.sourceforge.net/htmldoc/starting.html#--cmd
        " https://neovim.io/doc/user/starting.html#--cmd

    if !has("gui_running") && (argc() != 0) && (!&diff) && !exists("g:nk_diff")
        autocmd VimEnter * :bfirst
    endif
        " /ref/ http://learnvimscriptthehardway.stevelosh.com/chapters/12.html
        " /ref/ http://stackoverflow.com/questions/1944476/using-vimdiff-with-a-different-vimrc

" Synchronous scrolling - scrollbind
    " :windo set scb
" Exit synchronous mode
    " :windo set noscb
    nnoremap <leader>vs :windo set scb<CR>
    nnoremap <leader>vS :windo set noscb<CR>

" Compare files with vim
    " :windo diffthis
" Exit diff mode
    " :windo diffoff
    " Wrap lines - not so good
        " :windo setlocal wrap<
    nnoremap <leader>zd :windo diffthis<CR>
    nnoremap <leader>zD :windo diffoff<CR>
    nnoremap <leader>\ :diffthis<CR>
    " /ref/ http://vimcasts.org/episodes/comparing-buffers-with-vimdiff/
    " Show only differences
        " set diffopt=filler,context:0

" Open file from terminal in already running vim
    " term1 > vim --servername SRV a.txt
    " term2 > vim --servername SRV --remote b.txt
        " /ref/ http://unix.stackexchange.com/questions/246419/open-file-with-started-vim-from-outside-in-terminal
    " For vim in CentOS/Fedora/RHEL use "vimx" in order to use gvim "servername", "clipboard", ...
    " term1 > vimx --servername SRV a.txt
    " term2 > vimx --servername SRV --remote b.txt

" Calculate numerical expressions in vim
    " http://vimcasts.org/episodes/simple-calculations-with-vims-expression-register/
    " 0     move to the start of the line
    " yt=   yank from cursor position up to (but not including) the `=` sign
    " A     move to end of line and switch to Insert mode
    " <C-r>=    dial up the expression register
    " <C-r>"    paste the contents of the default register into the command line
    " <CR>  evaluate the expression register and insert the result into the document
    " <Esc>     return to Normal mode

    " nnoremap Q 0yt=A<C-r>=<C-r>"<CR><Esc>
    noremap <leader>zee :echo <C-r>=<C-r>"<CR><Esc>

" Buffer fast searching
    noremap <leader>zb :ls<CR>:buffer<Space>

" Buffer fast searching
    noremap <leader>nt :tabs<CR>:normal gt<Left><Left>
        " http://vim.wikia.com/wiki/Select_tab_page_with_a_key
    " Move tab to first place
        " :tabmove 0
    " Move tab to second place
        " :tabmove 1
    " Move tab to last place
        " :tabmove

" Focus text in middle - scrolloff
    noremap <leader>zf :set scrolloff=999<CR>
    noremap <leader>zF :set scrolloff=0<CR>

" Split window vertical and open custom buffer
    noremap <leader>vb :vert sb<Space>
    " For horizontal split and custom buffer use
        " ":sb"
" Remap for scroll up
    " unmap <C-D>
    " map <C-D> <C-Y>
    " noremap <C-D> <C-E>
    " noremap <C-E> <C-Y>
    noremap <C-D> <C-Y>

" Autocomplete
    " CRTL-x CRTL-f to be very useful, it autocompletes filenames of files that are in the current directory.
        " http://usevim.com/2012/07/06/vim101-completion/

" Zoom only one window
    " nnoremap <leader>zz :on<CR>

" Exchange : and ; keys
    " noremap ; :
    " noremap : ;

" Map :W to save, quit Qa
    command W w
    command Q q
    command Qa qa

        " https://coderwall.com/p/nckasg/map-w-to-w-in-vim

" CTRL-O - in insert mode
    " CTRL-O        execute one command, return to Insert mode   *i_CTRL-O
        " http://stackoverflow.com/questions/1737163/traversing-text-in-insert-mode

" ESC delay
    set timeoutlen=1000 ttimeoutlen=0
        " http://www.johnhawthorn.com/2012/09/vi-escape-delays/

" Marker at line 80, vertical marker for wrap

    highlight ColorColumn ctermbg = DarkGreen
    highlight ColorColumn guibg   = DarkGreen

    nnoremap <leader>zl :call NK_LineWidthMarker()<CR>
    nnoremap <leader>zL :call NK_NoLineWidthMarker()<CR>


    function! NK_LineWidthMarker()
        set colorcolumn=80
    endfunc

    function! NK_NoLineWidthMarker()
        set colorcolumn=
    endfunc
    " https://bbs.archlinux.org/viewtopic.php?id=35966

" Wrap text at line 80
    " set textwidth=80
    " set autoindent "in order to indent new lines like previous ones"
        " http://stackoverflow.com/a/22002014/2450748

    nnoremap <leader>vw :call NK_TextWrap()<CR>
    nnoremap <leader>vW :call NK_NoTextWrap()<CR>

    function! NK_TextWrap()
        set textwidth=80
        set autoindent
    endfunc

    function! NK_NoTextWrap()
        set textwidth=0
        set noautoindent
    endfunc

" Check your custom mappings - Great!
    " :map <C-d> "<C-d> is used to present all autocomplete combinations"
    " Because "Space" is custom character you have to press "C-v" twice (command mode) first and then "Space" for your leader
    " Example:
        " :map <C-v><C-v><Space> zz<C-d>
            " n  <Space>zz   * :on<CR>

" Copy command mode output to yank register
    " :redir @+
    "   :echo "bcd"
    " :redir END
        " http://superuser.com/questions/167352/how-do-i-copy-command-output-in-vim

" Indent block of lines
    " Select block of lines in visual mode
        " Indent by 4 spaces
        " :le 4

" Reindent lines
    " Select lines, and type:
        " ==

" Use vim as pager
    " echo abe | vim -
        " https://technotales.wordpress.com/2009/05/24/using-vim-as-a-pager/


" Set syntax for txt files to be bash
    " autocmd BufNewFile,BufRead *.txt   set ft=sh hi E"*rror none
    autocmd BufNewFile,BufRead *.txt call NK_TxtFiles()
    function! NK_TxtFiles()
        set ft=sh
        hi Error none
    endfunc
    " http://superuser.com/questions/654919/how-to-turn-off-gvim-error-highlighting
    " http://stackoverflow.com/questions/1413285/multiple-autocommands-in-vim
        " To turn off e
        " set ft=sh.cpp
        " http://vim.1045645.n5.nabble.com/mixed-syntax-highlighting-td5163327.html
        " /ref/ http://stackoverflow.com/a/11666247/2450748

" wikidoc files
    " autocmd BufNewFile,BufRead *.wikidoc  set ft=wikidoc

" Set tabwidth to 2 for 'yaml, xml' files
    autocmd FileType yaml setlocal shiftwidth=2 tabstop=2
    autocmd FileType xml  setlocal shiftwidth=2 tabstop=2
        " https://docs.saltstack.com/en/latest/topics/troubleshooting/yaml_idiosyncrasies.html

" DiffColors
    highlight DiffAdd      guibg=DarkGreen guifg=White
    highlight DiffDelete   guibg=DarkRed   guifg=White
    highlight DiffChange   guibg=DarkBlue  guifg=White
    highlight DiffText     guibg=Blue      guifg=White
        " http://stackoverflow.com/questions/2019281/load-different-colorscheme-when-using-vimdiff
        " http://blog.sanctum.geek.nz/unix-as-ide-editing/
        " http://usevim.com/2012/03/21/git-and-vimdiff/

    " highlight DiffAdd    cterm=bold ctermfg=10 ctermbg=17 gui=none guifg=bg guibg=Red
    " highlight DiffDelete cterm=bold ctermfg=10 ctermbg=17 gui=none guifg=bg guibg=Red
    " highlight DiffChange cterm=bold ctermfg=10 ctermbg=17 gui=none guifg=bg guibg=Red
    " highlight DiffText   cterm=bold ctermfg=10 ctermbg=88 gui=none guifg=bg guibg=Red

" Increment/Decrement number at or after the cursor
    " CTRL-A - Increment number
    " CTRL-X - Decrement number

" Enable mouse in terminal vim
    set mouse=a

" Paste from last yanked register
    " noremap <leader>pp "0p
        " http://benmccormick.org/2014/07/28/learning-vim-in-2014-copy-and-paste-the-vim-way/

" Open file at specific line/search
    " > vim +70 ~/.bashrc
    " > vim +/alias ~/.bashrc
        " http://www.cyberciti.biz/faq/linux-unix-command-open-file-linenumber-function/

" Autocomplete
    set wildmode=longest:list
        " http://blog.sanctum.geek.nz/lazier-tab-completion/

" Print current file percentage, file name and number of lines in command prompt - Useful on small displays
    " <C-g> - Print file percentage in command prompt

" Change inside <>
    set matchpairs+=<:>
        " http://stackoverflow.com/questions/1218390/what-is-your-most-productive-shortcut-with-vim?rq=1
        " :help matchpairs

" Map to reload
    nnoremap <leader>zv :set nowrap<CR>
    nnoremap <leader>zV :set wrap<CR>

" Save clipboard on exit
    autocmd VimLeave * call system("xclip -selection clipboard", getreg('+'))
        " http://stackoverflow.com/questions/6453595/prevent-vim-from-clearing-the-clipboard-on-exit

" Set Cygwin block cursor
    " rightclick on bar > Options > Looks > Cursor > Cursor radio button
        " http://superuser.com/questions/634326/how-can-i-get-a-block-cursor-in-vim-in-the-cygwin-terminal


" Show background color for current line
    set cursorline

" Change Color when entering Insert Mode
    autocmd InsertEnter * highlight  CursorLine ctermbg=17
" Revert Color to default when leaving Insert Mode
    autocmd InsertLeave * highlight  CursorLine ctermbg=237
    " http://stackoverflow.com/questions/7614546/vim-cursorline-color-change-in-insert-mode

" Print current line in command bar(down)
    nnoremap <leader>pl :echo getline(".")<CR>

" Highlight lines (red for "Title") that contain specific text
    nnoremap <leader>vh :match Title /.*.*/<Left><Left><Left>
                             " DiffAdd - green
    nnoremap <leader>vH :match None<CR>
    " Example, multiple highlighting
        " :match DiffChange /.*Constructor.*\|.*Variable.*/
        " http://lardcave.net/text/Highlighting%20arbitrary%20lines%20in%20Vim.html

" Neovim tutorials
    " https://www.youtube.com/watch?v=LRQGAnPtNdM
    " https://github.com/nicknisi/dotfiles/blob/master/config/nvim/init.vim

" Neovim configuration - init files
    " > ln -s ~/.vim ~/.config/nvim
    " > ln -s ~/.vimrc ~/.config/nvim/init.vim
        " https://wiki.archlinux.org/index.php/Neovim

" Neovim terminal open
    if has('nvim')
        nnoremap <leader>tt :vsp\|terminal<CR>
        nnoremap <leader>te :sp\|terminal<CR>
        " TERMINAL mode -great
        " tnoremap <Esc> <C-\><C-n>gg
        tnoremap <Esc> <C-\><C-n>?\$<CR>
        " nnoremap <leader>tc :normal <C-\><C-n>
            " https://neovim.io/doc/user/nvim_terminal_emulator.html
    endif

" Neovim copy from console output - mapped to <Esc>
    " <C-\><C-n>
        " https://github.com/neovim/neovim/issues/2293

" Count number of selected lines in visual mode
    " Select lines in Visual mode and then press
    " 'g C-g'
        " http://stackoverflow.com/a/7262572/2450748

" Print line above/bellow with custom args
    function! NK_PrintAboveMatch(sstring, direction)
        if !a:direction
            let match = search(a:sstring, 'bnW')
        else
            let match = search(a:sstring, 'nW')
        endif
        echo match.": ".getline(match)
    endfunction

    nnoremap <leader>pm :call NK_PrintAboveMatch("",0)<Left><Left><Left><Left>
    " http://vimdoc.sourceforge.net/htmldoc/eval.html#search%28%29

" Gvim for Centos
    " Gvim package for CentOS is called "vim-X11"

" Show current line at center/top/bottom
    " zz - show current line at center
    " zt - show current line at top
    " zb - show current line at bottom
        " https://speakerdeck.com/eddie/vim

" Pass multiple files from commandline
    " Dont use xargs and pipes(|) with vim!
    " Solution:
        " > vim $(find -type f)

" Search font color
    " location of color schemes:
    " /usr/share/vim/vim73/colors/desert.vim
        " https://www.linux.com/learn/weekend-project-take-control-vims-color-scheme

    " hi Search        guibg=peru guifg=brown
    hi Search        guibg=khaki guifg=brown
    hi IncSearch     guibg=yellow guifg=brown

" Increment number 07 to 08, dont use octal
    set nrformats-=octal
    " http://usevim.com/2015/07/03/visual-increment/

" Visual increment numbers
    " http://unix.stackexchange.com/a/72062/156466

" Get Unicode and ASCII value of character
    " ga - Get ASCII(ascii) value for character under the cursor
    " g8 - Get unicode (utf-8) value for character under the cursor

" Copy command
    " :<C-f> - Then you can copy your commands
        " http://vim.wikia.com/wiki/Copy,_cut_and_paste
" Disable Alt key in Gvim - Causes vimfiller tree toggle
    " set guioptions-=m
    " set guioptions-=M
        " http://vim.1045645.n5.nabble.com/Disabling-Alt-keys-menu-keys-in-Windows-gVim-td1162473.html

" Diff ignore whitespace
    " set diffopt+=iwhite
    " :help diffopt
        " http://vim.wikia.com/wiki/Ignore_white_space_in_vimdiff
    " ignore case
        " set diffopt+=icase

" Always diff vertical
    set diffopt+=vertical

" Remap ; to :
    nnoremap ; :
    " nnoremap : ;

" Disable sound and visual bell
    set noerrorbells visualbell t_vb=
    autocmd GUIEnter * set visualbell t_vb=
    " set noerrorbells
    " set t_vb=
    " set novisualbell
        " http://vim.wikia.com/wiki/Disable_beeping

" Horizontal split color, status line for inactive window
    " hi StatusLineNC guibg=yellow guifg=green
    " hi StatusLineNC                ctermfg=2     ctermbg=8     cterm=NONE
    " exe "hi! StatusLineNC"   .s:fmt_none   .s:fg_red .s:bg_base02 .s:fmt_revbb
    " exe "hi! StatusLineNC guibg=yellow guifg=green

" Custom parameters for current PC OS
    let g:nk_custom_config = $HOME."/nk_custom/vim/vimcustom.vim"

    if filereadable(g:nk_custom_config)
        exec "source ".g:nk_custom_config
            " http://stackoverflow.com/a/841025/2450748
        " source ~/vimcustom.vim
        " set guifont=Monospace\ 12
        " echo 'Custom settings loaded'
    endif

" Zoom / Unzooom Restore window
    function! s:ZoomToggle() abort
        if exists('t:zoomed') && t:zoomed
            execute t:zoom_winrestcmd
            let t:zoomed = 0
        else
            let t:zoom_winrestcmd = winrestcmd()
            resize
            vertical resize
            let t:zoomed = 1
        endif
    endfunction
    command! ZoomToggle call s:ZoomToggle()
    nnoremap <silent> <leader>zz :ZoomToggle<CR>
        " http://stackoverflow.com/a/26551079/2450748

" gitconfig syntax
    autocmd BufNewFile,BufRead gitconfig set ft=gitconfig

" start gvim maximized
    " set lines=999 columns=999

" delete lines that start with specific string (#3)
    ":g/^#3/d

" Load .vimrc when using sudo
    " > sudo -E vim /etc/some_conf_file
        " https://coderwall.com/p/xvryda/use-your-own-vimrc-when-using-sudo

" Execute vim command from bash shell
    " vim +PluginInstall +qall
        " http://stackoverflow.com/a/12834450/2450748

" Enable pasting of the same content multiple times
    " xnoremap p "0p
    " xnoremap P "0P
    " List previous yanks/copy with ":reg" command

" Save files (write) to specific files from terminal
" Execute vim commands from terminal
" # Allow rw access to files only, without messing up directories sticky bit
    " # Files that don't have permissions that others can write to them (o!=rw),
    " # write to it from vim so you become owner and them allow others to write to it
        " > find -type f -user nemanjak ! -perm -o=rw -exec sh -c 'vim {} -c ":w" -c "qa!"' \; -exec chmod o+rw {} \;

" Omni complete for python3 by default (not python2) for all python files
    if has('python3')
        autocmd FileType python set omnifunc=python3complete#Complete
    endif
        " https://stackoverflow.com/questions/41578873/can-omnicomplete-in-vim-for-python-3-complete-function-names-or-just-methods
